@page "/using/"
@model XUsingModel

@using XWebApplication.Models.XSystem
@using XWebApplication.Models.XSystem.XReflection

@{
    ViewData["Title"] = Model.XTitle;
}

<script type="text/javascript">
    function xonsubmit(targetForm) {
        var progress = document.getElementById("await");
        progress.hidden = false;
    }
    function xawait() {
        var progress = document.getElementById("await");
        progress.value = progress.max;
    }
</script>
@if (Model.XEntryType != null)
{
    if (Model.XEntryMethods.Length > 1 && (Model.Using == null || Model.Using == ""))
    {
        <form method="post" asp-page-handler="Using" asp-route-ReturnUrl="@Model.ReturnUrl">
            <select asp-for="Using" autofocus required>
                <optgroup label="@_XStringModel.XToString(Model.XEntryType, null)">
                    @foreach (var m in Model.XEntryMethods)
                    {
                        <option value="@m.XName">@_XStringModel.XToString(m, null)</option>
                    }
                </optgroup>
            </select>
            <input type="submit" value="Sign in" />
        </form>
    }
    else if (Model.XEntryMethod != null)
    {
        <form method="post" asp-page-handler="" asp-route-ReturnUrl="@Model.ReturnUrl" onsubmit="xonsubmit(this)">
            <input type="hidden" asp-for="Using" />
            @await Component.InvokeAsync("_XMethodInfo", new { xmethod = Model.XEntryMethod });
            <input type="submit" value="@_XStringModel.XToString(Model.XEntryMethod, null)" />
            <progress id="await" hidden max="100" value="0" />
        </form>
    }
}
@if (Model.XException != null)
{
    @await Component.InvokeAsync("_XException", new { xexception = Model.XException })
}
else
{
    <script type="text/javascript">
        xawait();
    </script>
}