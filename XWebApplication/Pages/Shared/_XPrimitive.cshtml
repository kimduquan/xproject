@model object
@using XSystem
@using XSystem.XReflection

@{
    string defaultValue = "";
    string required = "";
    string name = "";
    XType xtype = null;
    string type = "";
    bool isInput = true;
    var text = "";
    var css = "";
    string data = "";
    string id = "";
    string tabIndex = "";
    string accessKey = "";
    string spellcheck = "";
    if ((Model as XParameterInfo) != null)
    {
        xtype = ((XParameterInfo)Model).XParameterType;
        name = XUtil.XToName((XParameterInfo)Model);
        text = XUtil.XToDisplayString((XParameterInfo)Model);
        css = XUtil.XToCSSClass((XParameterInfo)Model);
        data = string.Format("data-{0}={1}", XUtil.XToData((XParameterInfo)Model), XUtil.XToName((XParameterInfo)Model));
        id = "" + ((XParameterInfo)Model).XPosition;
        tabIndex = "" + ((XParameterInfo)Model).XPosition;
        accessKey = XUtil.XToAccessKey((XParameterInfo)Model, ViewData);
    }
    else if ((Model as XFieldInfo) != null)
    {
        xtype = ((XFieldInfo)Model).XFieldType;
        name = XUtil.XToName((XFieldInfo)Model);
        text = XUtil.XToDisplayString((XFieldInfo)Model);
        css = XUtil.XToCSSClass((XFieldInfo)Model);
        data = string.Format("data-{0}={1}", XUtil.XToData((XFieldInfo)Model), XUtil.XToName((XFieldInfo)Model));
        id = "" + ((XFieldInfo)Model).XGetHashCode();
        accessKey = XUtil.XToAccessKey((XFieldInfo)Model, ViewData);
        tabIndex = XUtil.XToTabIndex((XFieldInfo)Model, ViewData);
    }
    else if ((Model as XPropertyInfo) != null)
    {
        xtype = ((XPropertyInfo)Model).XPropertyType;
        name = XUtil.XToName((XPropertyInfo)Model);
        text = XUtil.XToDisplayString((XPropertyInfo)Model);
        css = XUtil.XToCSSClass((XPropertyInfo)Model);
        data = string.Format("data-{0}={1}", XUtil.XToData((XPropertyInfo)Model), XUtil.XToName((XPropertyInfo)Model));
        id = "" + ((XPropertyInfo)Model).XGetHashCode();
        accessKey = XUtil.XToAccessKey((XPropertyInfo)Model, ViewData);
        tabIndex = XUtil.XToTabIndex((XPropertyInfo)Model, ViewData);
    }
    data += (" data-namespace=" + XUtil.XToName(xtype.XNamespace));
    data += (" data-type=" + XUtil.XToName(xtype));

    int index = text.IndexOf(accessKey, StringComparison.OrdinalIgnoreCase);
}

<label class="@css" for="@name" @required @Html.Raw(data)>
    @text.Substring(0, index)<mark><u>@text[index]</u></mark>@text.Substring(index + 1)<mark><sup>[@index]</sup></mark>
</label>
@if (xtype.XIsEnum)
{
    <select class="@css" name="@name" @required @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey">
        <optgroup label="@XUtil.XToDisplayString(xtype)">
            @foreach (string enumName in xtype.XGetEnumNames())
            {
                <option value="@XUtil.XToName(enumName)">@XUtil.XToDisplayString(enumName)</option>
            }
        </optgroup>
    </select>
}
else if (xtype.XFullName == (typeof(string[])).FullName)
{
    spellcheck = "spellcheck";
    <textarea class="@css" name="@name" @required  @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey" @spellcheck />
}
else
{
    @if (xtype.XFullName == (typeof(bool)).FullName)
    {
        type = "checkbox";
    }
    else if (xtype.XFullName == (typeof(System.Drawing.Color)).FullName)
    {
        type = "color";
    }
    else if (xtype.XFullName == (typeof(DateTime)).FullName)
    {
        type = "datetime";
    }
    else if (xtype.XFullName == (typeof(System.IO.File)).FullName)
    {
        type = "file";
    }
    else if (xtype.XFullName == (typeof(float)).FullName)
    {
        type = "number";
    }
    else if (xtype.XFullName == (typeof(int)).FullName)
    {
        type = "number";
    }
    else if (xtype.XFullName == (typeof(string)).FullName)
    {
        spellcheck = "spellcheck";
        type = "text";
    }
    else if (xtype.XFullName == (typeof(Uri)).FullName)
    {
        type = "url";
    }
    else
    {
        isInput = false;
    }

    @if (isInput)
    {
        <input name="@name" type="@type" defaultValue="@defaultValue" class="@css" @required  @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey" @spellcheck />
    }
    else
    {
        @await Html.PartialAsync("_XRef", xtype);
    }
}
