@model object
@using XSystem
@using XSystem.XReflection

@{
    string defaultValue = "";
    string required = "";
    string name = "";
    XType xtype = null;
    string type = "";
    bool isInput = true;
    var text = "";
    var css = "";
    string data = "";
    string id = "";
    string tabIndex = "";
    string accessKey = "";
    string spellcheck = "";
    bool isPassword = false;
    string readOnly = "";
    string disabled = "";
    if (Model is XParameterInfo xparameterInfo)
    {
        xtype = xparameterInfo.XParameterType;
        name = XUtil.XToName(xparameterInfo);
        text = XUtil.XToDisplayString(xparameterInfo);
        css = XUtil.XToCSSClass(xparameterInfo);
        data = string.Format("data-{0}={1}", XUtil.XToData(xparameterInfo), XUtil.XToName(xparameterInfo));
        id = "" + xparameterInfo.XPosition;
        tabIndex = "" + xparameterInfo.XPosition;
        accessKey = XUtil.XToAccessKey(xparameterInfo, ViewData);
        isPassword = XUtil.XImplicit(xparameterInfo);
    }
    else if (Model is XFieldInfo xfieldInfo)
    {
        xtype = xfieldInfo.XFieldType;
        name = XUtil.XToName(xfieldInfo);
        text = XUtil.XToDisplayString(xfieldInfo);
        css = XUtil.XToCSSClass(xfieldInfo);
        data = string.Format("data-{0}={1}", XUtil.XToData(xfieldInfo), XUtil.XToName(xfieldInfo));
        id = "" + xfieldInfo.XGetHashCode();
        accessKey = XUtil.XToAccessKey(xfieldInfo, ViewData);
        tabIndex = XUtil.XToTabIndex(xfieldInfo, ViewData);
        isPassword = XUtil.XImplicit(xfieldInfo);
        if (xfieldInfo.XIsInitOnly)
        {
            readOnly = "readonly";
            disabled = "disabled";
        }
    }
    else if (Model is XPropertyInfo xpropertyInfo)
    {
        xtype = xpropertyInfo.XPropertyType;
        name = XUtil.XToName(xpropertyInfo);
        text = XUtil.XToDisplayString(xpropertyInfo);
        css = XUtil.XToCSSClass(xpropertyInfo);
        data = string.Format("data-{0}={1}", XUtil.XToData(xpropertyInfo), XUtil.XToName(xpropertyInfo));
        id = "" + xpropertyInfo.XGetHashCode();
        accessKey = XUtil.XToAccessKey(xpropertyInfo, ViewData);
        tabIndex = XUtil.XToTabIndex(xpropertyInfo, ViewData);
        isPassword = XUtil.XImplicit(xpropertyInfo);
        if (xpropertyInfo.XCanWrite == false)
        {
            readOnly = "readonly";
            disabled = "disabled";
        }
    }
    data += (" data-namespace=" + XUtil.XToName(xtype.XNamespace));
    data += (" data-type=" + XUtil.XToName(xtype));

    int index = text.IndexOf(accessKey, StringComparison.OrdinalIgnoreCase);
}
<script type="text/javascript">
    function xondrop(ev, name, xtype){
        ev.preventDefault();
        var type = ev.dataTransfer.getData("type");
        if (type != null && xtype == type) {
            var target = document.getElementById(name);
            if (target != null) {
                var hashCode = ev.dataTransfer.getData("hashCode");
                if (hashCode != null) {
                    target.value = type + "#" + hashCode;
                    var display = target.parentElement.getElementsByTagName('div')[0];
                    display.textContent = "#" + hashCode;
                }
            }
        }
    }
    function xondragover(ev) {
        ev.preventDefault();
    }
</script>
<label class="@css" for="@name" @required @Html.Raw(data)>
    @text.Substring(0, index)<mark><u>@text[index]</u></mark>@text.Substring(index + 1)<mark><sup>[@index]</sup></mark>
</label>
@if (xtype.XIsEnum)
{
    <select class="@css" name="@name" @required @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey" @disabled>
        <optgroup label="@XUtil.XToDisplayString(xtype)">
            @foreach (string enumName in xtype.XGetEnumNames())
            {
                <option value="@XUtil.XToName(enumName)">@XUtil.XToDisplayString(enumName)</option>
            }
        </optgroup>
    </select>
}
else if (xtype.XFullName == (typeof(string[])).FullName)
{
    spellcheck = "spellcheck";
    <textarea class="@css" name="@name" @required  @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey" @spellcheck @readOnly @disabled />
}
else
{
    if(isPassword)
    {
        type = "password";
    }
    else if (xtype.XFullName == (typeof(bool)).FullName)
    {
        type = "checkbox";
    }
    else if (xtype.XFullName == (typeof(System.Drawing.Color)).FullName)
    {
        type = "color";
    }
    else if (xtype.XFullName == (typeof(DateTime)).FullName)
    {
        type = "datetime";
    }
    else if (xtype.XFullName == (typeof(System.IO.File)).FullName)
    {
        type = "file";
    }
    else if (xtype.XFullName == (typeof(float)).FullName)
    {
        type = "number";
    }
    else if (xtype.XFullName == (typeof(int)).FullName)
    {
        type = "number";
    }
    else if (xtype.XFullName == (typeof(string)).FullName)
    {
        spellcheck = "spellcheck";
        type = "text";
    }
    else if (xtype.XFullName == (typeof(Uri)).FullName)
    {
        type = "url";
    }
    else
    {
        isInput = false;
    }

    if (isInput)
    {
        <input name="@name" type="@type" defaultValue="@defaultValue" class="@css" @required  @Html.Raw(data) id="@id" tabndex="@tabIndex" accesskey="@accessKey" @spellcheck @readOnly @disabled />
    }
    else
    {
        <div ondrop="xondrop(event, '@name', '@xtype.XFullName')" ondragover="xondragover(event)">
            <div>Drop here!</div>
            <input type="hidden" name="@name" id="@name" />
        </div>
        @await Html.PartialAsync("_XRef", xtype);
    }
}
