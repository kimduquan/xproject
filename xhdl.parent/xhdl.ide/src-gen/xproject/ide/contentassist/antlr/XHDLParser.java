/*
 * generated by Xtext 2.15.0
 */
package xproject.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xproject.ide.contentassist.antlr.internal.InternalXHDLParser;
import xproject.services.XHDLGrammarAccess;

public class XHDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XHDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XHDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getXElementAccess().getAlternatives(), "rule__XElement__Alternatives");
			builder.put(grammarAccess.getXTypeAccess().getAlternatives(), "rule__XType__Alternatives");
			builder.put(grammarAccess.getXPackageAccess().getGroup(), "rule__XPackage__Group__0");
			builder.put(grammarAccess.getXAttributeAccess().getGroup(), "rule__XAttribute__Group__0");
			builder.put(grammarAccess.getXSubTypeAccess().getGroup(), "rule__XSubType__Group__0");
			builder.put(grammarAccess.getXSignalAccess().getGroup(), "rule__XSignal__Group__0");
			builder.put(grammarAccess.getXTypeAccess().getGroup_0(), "rule__XType__Group_0__0");
			builder.put(grammarAccess.getXTypeAccess().getGroup_2(), "rule__XType__Group_2__0");
			builder.put(grammarAccess.getXArrayAccess().getGroup(), "rule__XArray__Group__0");
			builder.put(grammarAccess.getXRangeAccess().getGroup(), "rule__XRange__Group__0");
			builder.put(grammarAccess.getXUnitsAccess().getGroup(), "rule__XUnits__Group__0");
			builder.put(grammarAccess.getXUnitAccess().getGroup(), "rule__XUnit__Group__0");
			builder.put(grammarAccess.getXEnumsAccess().getGroup(), "rule__XEnums__Group__0");
			builder.put(grammarAccess.getXEnumsAccess().getGroup_1(), "rule__XEnums__Group_1__0");
			builder.put(grammarAccess.getXhdlAccess().getPackagesAssignment(), "rule__Xhdl__PackagesAssignment");
			builder.put(grammarAccess.getXPackageAccess().getNameAssignment_1(), "rule__XPackage__NameAssignment_1");
			builder.put(grammarAccess.getXPackageAccess().getElementsAssignment_3(), "rule__XPackage__ElementsAssignment_3");
			builder.put(grammarAccess.getXTypeAccess().getNameAssignment_0_2(), "rule__XType__NameAssignment_0_2");
			builder.put(grammarAccess.getXUnitsAccess().getUnitsAssignment_2(), "rule__XUnits__UnitsAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XHDLGrammarAccess grammarAccess;

	@Override
	protected InternalXHDLParser createParser() {
		InternalXHDLParser result = new InternalXHDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XHDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XHDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
