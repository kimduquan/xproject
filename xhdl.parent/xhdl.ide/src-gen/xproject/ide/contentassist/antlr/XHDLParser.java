/*
 * generated by Xtext 2.15.0
 */
package xproject.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xproject.ide.contentassist.antlr.internal.InternalXHDLParser;
import xproject.services.XHDLGrammarAccess;

public class XHDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XHDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XHDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getXElementAccess().getAlternatives(), "rule__XElement__Alternatives");
			builder.put(grammarAccess.getXTypeAccess().getAlternatives_4_0(), "rule__XType__Alternatives_4_0");
			builder.put(grammarAccess.getXRangeValueAccess().getAlternatives_1(), "rule__XRangeValue__Alternatives_1");
			builder.put(grammarAccess.getXRangeValueAccess().getAlternatives_1_0_0(), "rule__XRangeValue__Alternatives_1_0_0");
			builder.put(grammarAccess.getXEnumAccess().getAlternatives(), "rule__XEnum__Alternatives");
			builder.put(grammarAccess.getXPackageRefAccess().getGroup(), "rule__XPackageRef__Group__0");
			builder.put(grammarAccess.getXPackageAccess().getGroup(), "rule__XPackage__Group__0");
			builder.put(grammarAccess.getXTypeRefAccess().getGroup(), "rule__XTypeRef__Group__0");
			builder.put(grammarAccess.getXAttributeAccess().getGroup(), "rule__XAttribute__Group__0");
			builder.put(grammarAccess.getXSubTypeAccess().getGroup(), "rule__XSubType__Group__0");
			builder.put(grammarAccess.getXSubTypeAccess().getGroup_4_0(), "rule__XSubType__Group_4_0__0");
			builder.put(grammarAccess.getXSignalAccess().getGroup(), "rule__XSignal__Group__0");
			builder.put(grammarAccess.getXSignalAccess().getGroup_2_1(), "rule__XSignal__Group_2_1__0");
			builder.put(grammarAccess.getXTypeAccess().getGroup(), "rule__XType__Group__0");
			builder.put(grammarAccess.getXArrayAccess().getGroup(), "rule__XArray__Group__0");
			builder.put(grammarAccess.getXArrayAccess().getGroup_2_1(), "rule__XArray__Group_2_1__0");
			builder.put(grammarAccess.getXRangeAccess().getGroup(), "rule__XRange__Group__0");
			builder.put(grammarAccess.getXRangeValueAccess().getGroup(), "rule__XRangeValue__Group__0");
			builder.put(grammarAccess.getXRangeValueAccess().getGroup_1_0(), "rule__XRangeValue__Group_1_0__0");
			builder.put(grammarAccess.getXRangeValueAccess().getGroup_1_1_0(), "rule__XRangeValue__Group_1_1_0__0");
			builder.put(grammarAccess.getXUnitsAccess().getGroup(), "rule__XUnits__Group__0");
			builder.put(grammarAccess.getXUnitRefAccess().getGroup(), "rule__XUnitRef__Group__0");
			builder.put(grammarAccess.getXUnitAccess().getGroup(), "rule__XUnit__Group__0");
			builder.put(grammarAccess.getXUnitAccess().getGroup_1_0(), "rule__XUnit__Group_1_0__0");
			builder.put(grammarAccess.getXUnitAccess().getGroup_1_0_1_1(), "rule__XUnit__Group_1_0_1_1__0");
			builder.put(grammarAccess.getXEnumsAccess().getGroup(), "rule__XEnums__Group__0");
			builder.put(grammarAccess.getXFunctionRefAccess().getGroup(), "rule__XFunctionRef__Group__0");
			builder.put(grammarAccess.getXImpureAccess().getGroup_0(), "rule__XImpure__Group_0__0");
			builder.put(grammarAccess.getXhdlAccess().getPackagesAssignment(), "rule__Xhdl__PackagesAssignment");
			builder.put(grammarAccess.getXPackageRefAccess().getNameAssignment_1(), "rule__XPackageRef__NameAssignment_1");
			builder.put(grammarAccess.getXPackageAccess().getNameAssignment_1(), "rule__XPackage__NameAssignment_1");
			builder.put(grammarAccess.getXPackageAccess().getXisAssignment_3(), "rule__XPackage__XisAssignment_3");
			builder.put(grammarAccess.getXPackageAccess().getXendAssignment_5_0(), "rule__XPackage__XendAssignment_5_0");
			builder.put(grammarAccess.getXTypeRefAccess().getNameAssignment_1(), "rule__XTypeRef__NameAssignment_1");
			builder.put(grammarAccess.getXAttributeAccess().getNameAssignment_2_0(), "rule__XAttribute__NameAssignment_2_0");
			builder.put(grammarAccess.getXAttributeAccess().getXtypeAssignment_2_2(), "rule__XAttribute__XtypeAssignment_2_2");
			builder.put(grammarAccess.getXSubTypeAccess().getNameAssignment_2(), "rule__XSubType__NameAssignment_2");
			builder.put(grammarAccess.getXSubTypeAccess().getXisAssignment_4_0_0(), "rule__XSubType__XisAssignment_4_0_0");
			builder.put(grammarAccess.getXSubTypeAccess().getXrangeAssignment_4_0_1(), "rule__XSubType__XrangeAssignment_4_0_1");
			builder.put(grammarAccess.getXSignalAccess().getNameAssignment_2_0(), "rule__XSignal__NameAssignment_2_0");
			builder.put(grammarAccess.getXSignalAccess().getXtypeAssignment_2_1_1(), "rule__XSignal__XtypeAssignment_2_1_1");
			builder.put(grammarAccess.getXTypeAccess().getNameAssignment_2(), "rule__XType__NameAssignment_2");
			builder.put(grammarAccess.getXTypeAccess().getXenumsAssignment_4_0_0(), "rule__XType__XenumsAssignment_4_0_0");
			builder.put(grammarAccess.getXTypeAccess().getXrangeAssignment_4_0_1(), "rule__XType__XrangeAssignment_4_0_1");
			builder.put(grammarAccess.getXTypeAccess().getXarrayAssignment_4_0_2(), "rule__XType__XarrayAssignment_4_0_2");
			builder.put(grammarAccess.getXArrayAccess().getXrangeAssignment_2_1_0(), "rule__XArray__XrangeAssignment_2_1_0");
			builder.put(grammarAccess.getXArrayAccess().getXofAssignment_4(), "rule__XArray__XofAssignment_4");
			builder.put(grammarAccess.getXRangeAccess().getXfromAssignment_2(), "rule__XRange__XfromAssignment_2");
			builder.put(grammarAccess.getXRangeAccess().getXtoAssignment_4(), "rule__XRange__XtoAssignment_4");
			builder.put(grammarAccess.getXRangeAccess().getXunitsAssignment_5(), "rule__XRange__XunitsAssignment_5");
			builder.put(grammarAccess.getXRangeValueAccess().getXlvalueAssignment_1_0_0_0(), "rule__XRangeValue__XlvalueAssignment_1_0_0_0");
			builder.put(grammarAccess.getXRangeValueAccess().getXdvalueAssignment_1_0_0_1(), "rule__XRangeValue__XdvalueAssignment_1_0_0_1");
			builder.put(grammarAccess.getXRangeValueAccess().getXunitAssignment_1_0_1(), "rule__XRangeValue__XunitAssignment_1_0_1");
			builder.put(grammarAccess.getXUnitsAccess().getXunitsAssignment_2(), "rule__XUnits__XunitsAssignment_2");
			builder.put(grammarAccess.getXUnitRefAccess().getNameAssignment_1(), "rule__XUnitRef__NameAssignment_1");
			builder.put(grammarAccess.getXUnitAccess().getNameAssignment_1_0_0(), "rule__XUnit__NameAssignment_1_0_0");
			builder.put(grammarAccess.getXUnitAccess().getXvalueAssignment_1_0_1_1_0(), "rule__XUnit__XvalueAssignment_1_0_1_1_0");
			builder.put(grammarAccess.getXUnitAccess().getXbasedAssignment_1_0_1_1_1(), "rule__XUnit__XbasedAssignment_1_0_1_1_1");
			builder.put(grammarAccess.getXEnumsAccess().getXenumsAssignment_1_1_1(), "rule__XEnums__XenumsAssignment_1_1_1");
			builder.put(grammarAccess.getXFunctionRefAccess().getNameAssignment_2(), "rule__XFunctionRef__NameAssignment_2");
			builder.put(grammarAccess.getXFunctionRefAccess().getXreturnAssignment_4(), "rule__XFunctionRef__XreturnAssignment_4");
			builder.put(grammarAccess.getXImpureAccess().getXfuncAssignment_0_1(), "rule__XImpure__XfuncAssignment_0_1");
			builder.put(grammarAccess.getXPackageAccess().getUnorderedGroup_5(), "rule__XPackage__UnorderedGroup_5");
			builder.put(grammarAccess.getXAttributeAccess().getUnorderedGroup_2(), "rule__XAttribute__UnorderedGroup_2");
			builder.put(grammarAccess.getXSubTypeAccess().getUnorderedGroup_4(), "rule__XSubType__UnorderedGroup_4");
			builder.put(grammarAccess.getXSignalAccess().getUnorderedGroup_2(), "rule__XSignal__UnorderedGroup_2");
			builder.put(grammarAccess.getXSignalAccess().getUnorderedGroup_2_2(), "rule__XSignal__UnorderedGroup_2_2");
			builder.put(grammarAccess.getXTypeAccess().getUnorderedGroup_4(), "rule__XType__UnorderedGroup_4");
			builder.put(grammarAccess.getXArrayAccess().getUnorderedGroup_2(), "rule__XArray__UnorderedGroup_2");
			builder.put(grammarAccess.getXRangeValueAccess().getUnorderedGroup_1_1(), "rule__XRangeValue__UnorderedGroup_1_1");
			builder.put(grammarAccess.getXUnitAccess().getUnorderedGroup_1(), "rule__XUnit__UnorderedGroup_1");
			builder.put(grammarAccess.getXUnitAccess().getUnorderedGroup_1_0_1(), "rule__XUnit__UnorderedGroup_1_0_1");
			builder.put(grammarAccess.getXEnumsAccess().getUnorderedGroup_1(), "rule__XEnums__UnorderedGroup_1");
			builder.put(grammarAccess.getXEnumsAccess().getUnorderedGroup_1_1(), "rule__XEnums__UnorderedGroup_1_1");
			builder.put(grammarAccess.getXImpureAccess().getUnorderedGroup(), "rule__XImpure__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XHDLGrammarAccess grammarAccess;

	@Override
	protected InternalXHDLParser createParser() {
		InternalXHDLParser result = new InternalXHDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_COMMENT" };
	}

	public XHDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XHDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
