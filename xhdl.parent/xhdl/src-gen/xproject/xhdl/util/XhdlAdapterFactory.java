/**
 * generated by Xtext 2.15.0
 */
package xproject.xhdl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xproject.xhdl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xproject.xhdl.XhdlPackage
 * @generated
 */
public class XhdlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XhdlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XhdlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XhdlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XhdlSwitch<Adapter> modelSwitch =
    new XhdlSwitch<Adapter>()
    {
      @Override
      public Adapter casexhdl(xhdl object)
      {
        return createxhdlAdapter();
      }
      @Override
      public Adapter caseXPackageRef(XPackageRef object)
      {
        return createXPackageRefAdapter();
      }
      @Override
      public Adapter caseXPackage(XPackage object)
      {
        return createXPackageAdapter();
      }
      @Override
      public Adapter caseXTypeRef(XTypeRef object)
      {
        return createXTypeRefAdapter();
      }
      @Override
      public Adapter caseXElement(XElement object)
      {
        return createXElementAdapter();
      }
      @Override
      public Adapter caseXAttribute(XAttribute object)
      {
        return createXAttributeAdapter();
      }
      @Override
      public Adapter caseXSubType(XSubType object)
      {
        return createXSubTypeAdapter();
      }
      @Override
      public Adapter caseXSignal(XSignal object)
      {
        return createXSignalAdapter();
      }
      @Override
      public Adapter caseXType(XType object)
      {
        return createXTypeAdapter();
      }
      @Override
      public Adapter caseXArray(XArray object)
      {
        return createXArrayAdapter();
      }
      @Override
      public Adapter caseXRange(XRange object)
      {
        return createXRangeAdapter();
      }
      @Override
      public Adapter caseXRangeValue(XRangeValue object)
      {
        return createXRangeValueAdapter();
      }
      @Override
      public Adapter caseXUnits(XUnits object)
      {
        return createXUnitsAdapter();
      }
      @Override
      public Adapter caseXUnitRef(XUnitRef object)
      {
        return createXUnitRefAdapter();
      }
      @Override
      public Adapter caseXUnit(XUnit object)
      {
        return createXUnitAdapter();
      }
      @Override
      public Adapter caseXEnums(XEnums object)
      {
        return createXEnumsAdapter();
      }
      @Override
      public Adapter caseXFunctionRef(XFunctionRef object)
      {
        return createXFunctionRefAdapter();
      }
      @Override
      public Adapter caseXImpure(XImpure object)
      {
        return createXImpureAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.xhdl <em>xhdl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.xhdl
   * @generated
   */
  public Adapter createxhdlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XPackageRef <em>XPackage Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XPackageRef
   * @generated
   */
  public Adapter createXPackageRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XPackage <em>XPackage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XPackage
   * @generated
   */
  public Adapter createXPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XTypeRef <em>XType Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XTypeRef
   * @generated
   */
  public Adapter createXTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XElement <em>XElement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XElement
   * @generated
   */
  public Adapter createXElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XAttribute <em>XAttribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XAttribute
   * @generated
   */
  public Adapter createXAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XSubType <em>XSub Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XSubType
   * @generated
   */
  public Adapter createXSubTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XSignal <em>XSignal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XSignal
   * @generated
   */
  public Adapter createXSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XType <em>XType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XType
   * @generated
   */
  public Adapter createXTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XArray <em>XArray</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XArray
   * @generated
   */
  public Adapter createXArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XRange <em>XRange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XRange
   * @generated
   */
  public Adapter createXRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XRangeValue <em>XRange Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XRangeValue
   * @generated
   */
  public Adapter createXRangeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XUnits <em>XUnits</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XUnits
   * @generated
   */
  public Adapter createXUnitsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XUnitRef <em>XUnit Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XUnitRef
   * @generated
   */
  public Adapter createXUnitRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XUnit <em>XUnit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XUnit
   * @generated
   */
  public Adapter createXUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XEnums <em>XEnums</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XEnums
   * @generated
   */
  public Adapter createXEnumsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XFunctionRef <em>XFunction Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XFunctionRef
   * @generated
   */
  public Adapter createXFunctionRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xproject.xhdl.XImpure <em>XImpure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xproject.xhdl.XImpure
   * @generated
   */
  public Adapter createXImpureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XhdlAdapterFactory
