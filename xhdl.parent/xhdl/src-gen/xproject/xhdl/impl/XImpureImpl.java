/**
 * generated by Xtext 2.15.0
 */
package xproject.xhdl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xproject.xhdl.XFunctionRef;
import xproject.xhdl.XImpure;
import xproject.xhdl.XhdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XImpure</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xproject.xhdl.impl.XImpureImpl#getXfunc <em>Xfunc</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XImpureImpl extends XElementImpl implements XImpure
{
  /**
   * The cached value of the '{@link #getXfunc() <em>Xfunc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXfunc()
   * @generated
   * @ordered
   */
  protected XFunctionRef xfunc;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XImpureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XhdlPackage.Literals.XIMPURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XFunctionRef getXfunc()
  {
    return xfunc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXfunc(XFunctionRef newXfunc, NotificationChain msgs)
  {
    XFunctionRef oldXfunc = xfunc;
    xfunc = newXfunc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XhdlPackage.XIMPURE__XFUNC, oldXfunc, newXfunc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXfunc(XFunctionRef newXfunc)
  {
    if (newXfunc != xfunc)
    {
      NotificationChain msgs = null;
      if (xfunc != null)
        msgs = ((InternalEObject)xfunc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XIMPURE__XFUNC, null, msgs);
      if (newXfunc != null)
        msgs = ((InternalEObject)newXfunc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XIMPURE__XFUNC, null, msgs);
      msgs = basicSetXfunc(newXfunc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XIMPURE__XFUNC, newXfunc, newXfunc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XhdlPackage.XIMPURE__XFUNC:
        return basicSetXfunc(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XhdlPackage.XIMPURE__XFUNC:
        return getXfunc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XhdlPackage.XIMPURE__XFUNC:
        setXfunc((XFunctionRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XIMPURE__XFUNC:
        setXfunc((XFunctionRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XIMPURE__XFUNC:
        return xfunc != null;
    }
    return super.eIsSet(featureID);
  }

} //XImpureImpl
