/**
 * generated by Xtext 2.15.0
 */
package xproject.xhdl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xproject.xhdl.XElement;
import xproject.xhdl.XPackage;
import xproject.xhdl.XPackageRef;
import xproject.xhdl.XhdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XPackage</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xproject.xhdl.impl.XPackageImpl#getName <em>Name</em>}</li>
 *   <li>{@link xproject.xhdl.impl.XPackageImpl#getXis <em>Xis</em>}</li>
 *   <li>{@link xproject.xhdl.impl.XPackageImpl#getXend <em>Xend</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XPackageImpl extends MinimalEObjectImpl.Container implements XPackage
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getXis() <em>Xis</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXis()
   * @generated
   * @ordered
   */
  protected EList<XElement> xis;

  /**
   * The cached value of the '{@link #getXend() <em>Xend</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXend()
   * @generated
   * @ordered
   */
  protected XPackageRef xend;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XPackageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XhdlPackage.Literals.XPACKAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XPACKAGE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XElement> getXis()
  {
    if (xis == null)
    {
      xis = new EObjectContainmentEList<XElement>(XElement.class, this, XhdlPackage.XPACKAGE__XIS);
    }
    return xis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XPackageRef getXend()
  {
    return xend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXend(XPackageRef newXend, NotificationChain msgs)
  {
    XPackageRef oldXend = xend;
    xend = newXend;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XhdlPackage.XPACKAGE__XEND, oldXend, newXend);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXend(XPackageRef newXend)
  {
    if (newXend != xend)
    {
      NotificationChain msgs = null;
      if (xend != null)
        msgs = ((InternalEObject)xend).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XPACKAGE__XEND, null, msgs);
      if (newXend != null)
        msgs = ((InternalEObject)newXend).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XPACKAGE__XEND, null, msgs);
      msgs = basicSetXend(newXend, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XPACKAGE__XEND, newXend, newXend));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XhdlPackage.XPACKAGE__XIS:
        return ((InternalEList<?>)getXis()).basicRemove(otherEnd, msgs);
      case XhdlPackage.XPACKAGE__XEND:
        return basicSetXend(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XhdlPackage.XPACKAGE__NAME:
        return getName();
      case XhdlPackage.XPACKAGE__XIS:
        return getXis();
      case XhdlPackage.XPACKAGE__XEND:
        return getXend();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XhdlPackage.XPACKAGE__NAME:
        setName((String)newValue);
        return;
      case XhdlPackage.XPACKAGE__XIS:
        getXis().clear();
        getXis().addAll((Collection<? extends XElement>)newValue);
        return;
      case XhdlPackage.XPACKAGE__XEND:
        setXend((XPackageRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XPACKAGE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case XhdlPackage.XPACKAGE__XIS:
        getXis().clear();
        return;
      case XhdlPackage.XPACKAGE__XEND:
        setXend((XPackageRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XPACKAGE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case XhdlPackage.XPACKAGE__XIS:
        return xis != null && !xis.isEmpty();
      case XhdlPackage.XPACKAGE__XEND:
        return xend != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //XPackageImpl
