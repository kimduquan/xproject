/**
 * generated by Xtext 2.15.0
 */
package xproject.xhdl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xproject.xhdl.XArray;
import xproject.xhdl.XTypeRef;
import xproject.xhdl.XhdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XArray</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xproject.xhdl.impl.XArrayImpl#getXrange <em>Xrange</em>}</li>
 *   <li>{@link xproject.xhdl.impl.XArrayImpl#getXof <em>Xof</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XArrayImpl extends MinimalEObjectImpl.Container implements XArray
{
  /**
   * The cached value of the '{@link #getXrange() <em>Xrange</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXrange()
   * @generated
   * @ordered
   */
  protected XTypeRef xrange;

  /**
   * The cached value of the '{@link #getXof() <em>Xof</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXof()
   * @generated
   * @ordered
   */
  protected XTypeRef xof;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XArrayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XhdlPackage.Literals.XARRAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef getXrange()
  {
    return xrange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXrange(XTypeRef newXrange, NotificationChain msgs)
  {
    XTypeRef oldXrange = xrange;
    xrange = newXrange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XRANGE, oldXrange, newXrange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXrange(XTypeRef newXrange)
  {
    if (newXrange != xrange)
    {
      NotificationChain msgs = null;
      if (xrange != null)
        msgs = ((InternalEObject)xrange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XARRAY__XRANGE, null, msgs);
      if (newXrange != null)
        msgs = ((InternalEObject)newXrange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XARRAY__XRANGE, null, msgs);
      msgs = basicSetXrange(newXrange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XRANGE, newXrange, newXrange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef getXof()
  {
    return xof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXof(XTypeRef newXof, NotificationChain msgs)
  {
    XTypeRef oldXof = xof;
    xof = newXof;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XOF, oldXof, newXof);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXof(XTypeRef newXof)
  {
    if (newXof != xof)
    {
      NotificationChain msgs = null;
      if (xof != null)
        msgs = ((InternalEObject)xof).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XARRAY__XOF, null, msgs);
      if (newXof != null)
        msgs = ((InternalEObject)newXof).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XhdlPackage.XARRAY__XOF, null, msgs);
      msgs = basicSetXof(newXof, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XOF, newXof, newXof));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        return basicSetXrange(null, msgs);
      case XhdlPackage.XARRAY__XOF:
        return basicSetXof(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        return getXrange();
      case XhdlPackage.XARRAY__XOF:
        return getXof();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        setXrange((XTypeRef)newValue);
        return;
      case XhdlPackage.XARRAY__XOF:
        setXof((XTypeRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        setXrange((XTypeRef)null);
        return;
      case XhdlPackage.XARRAY__XOF:
        setXof((XTypeRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        return xrange != null;
      case XhdlPackage.XARRAY__XOF:
        return xof != null;
    }
    return super.eIsSet(featureID);
  }

} //XArrayImpl
