/**
 * generated by Xtext 2.15.0
 */
package xproject.xhdl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xproject.xhdl.XArray;
import xproject.xhdl.XTypeRef;
import xproject.xhdl.XhdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XArray</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xproject.xhdl.impl.XArrayImpl#getXrange <em>Xrange</em>}</li>
 *   <li>{@link xproject.xhdl.impl.XArrayImpl#getXof <em>Xof</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XArrayImpl extends MinimalEObjectImpl.Container implements XArray
{
  /**
   * The cached value of the '{@link #getXrange() <em>Xrange</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXrange()
   * @generated
   * @ordered
   */
  protected XTypeRef xrange;

  /**
   * The cached value of the '{@link #getXof() <em>Xof</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXof()
   * @generated
   * @ordered
   */
  protected XTypeRef xof;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XArrayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XhdlPackage.Literals.XARRAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef getXrange()
  {
    if (xrange != null && xrange.eIsProxy())
    {
      InternalEObject oldXrange = (InternalEObject)xrange;
      xrange = (XTypeRef)eResolveProxy(oldXrange);
      if (xrange != oldXrange)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XhdlPackage.XARRAY__XRANGE, oldXrange, xrange));
      }
    }
    return xrange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef basicGetXrange()
  {
    return xrange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXrange(XTypeRef newXrange)
  {
    XTypeRef oldXrange = xrange;
    xrange = newXrange;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XRANGE, oldXrange, xrange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef getXof()
  {
    if (xof != null && xof.eIsProxy())
    {
      InternalEObject oldXof = (InternalEObject)xof;
      xof = (XTypeRef)eResolveProxy(oldXof);
      if (xof != oldXof)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XhdlPackage.XARRAY__XOF, oldXof, xof));
      }
    }
    return xof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XTypeRef basicGetXof()
  {
    return xof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXof(XTypeRef newXof)
  {
    XTypeRef oldXof = xof;
    xof = newXof;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XhdlPackage.XARRAY__XOF, oldXof, xof));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        if (resolve) return getXrange();
        return basicGetXrange();
      case XhdlPackage.XARRAY__XOF:
        if (resolve) return getXof();
        return basicGetXof();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        setXrange((XTypeRef)newValue);
        return;
      case XhdlPackage.XARRAY__XOF:
        setXof((XTypeRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        setXrange((XTypeRef)null);
        return;
      case XhdlPackage.XARRAY__XOF:
        setXof((XTypeRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XhdlPackage.XARRAY__XRANGE:
        return xrange != null;
      case XhdlPackage.XARRAY__XOF:
        return xof != null;
    }
    return super.eIsSet(featureID);
  }

} //XArrayImpl
