/*
 * generated by Xtext 2.15.0
 */
package xproject.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xproject.services.XHDLGrammarAccess;
import xproject.xhdl.XPackage;
import xproject.xhdl.XhdlPackage;
import xproject.xhdl.array;
import xproject.xhdl.attribute;
import xproject.xhdl.range;
import xproject.xhdl.signal;
import xproject.xhdl.subtype;
import xproject.xhdl.type;
import xproject.xhdl.units;
import xproject.xhdl.xhdl;

@SuppressWarnings("all")
public class XHDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XHDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XhdlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XhdlPackage.XPACKAGE:
				sequence_XPackage(context, (XPackage) semanticObject); 
				return; 
			case XhdlPackage.ARRAY:
				sequence_XArray(context, (array) semanticObject); 
				return; 
			case XhdlPackage.ATTRIBUTE:
				sequence_XAttribute(context, (attribute) semanticObject); 
				return; 
			case XhdlPackage.RANGE:
				if (rule == grammarAccess.getXRangeRule()) {
					sequence_XRange_XUnits(context, (range) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXElementRule()
						|| rule == grammarAccess.getXTypeRule()) {
					sequence_XRange(context, (range) semanticObject); 
					return; 
				}
				else break;
			case XhdlPackage.SIGNAL:
				sequence_XSignal(context, (signal) semanticObject); 
				return; 
			case XhdlPackage.SUBTYPE:
				sequence_XSubType(context, (subtype) semanticObject); 
				return; 
			case XhdlPackage.TYPE:
				sequence_XType(context, (type) semanticObject); 
				return; 
			case XhdlPackage.UNITS:
				sequence_XUnits(context, (units) semanticObject); 
				return; 
			case XhdlPackage.XHDL:
				sequence_xhdl(context, (xhdl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     XElement returns array
	 *     XType returns array
	 *     XArray returns array
	 *
	 * Constraint:
	 *     {array}
	 */
	protected void sequence_XArray(ISerializationContext context, array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XElement returns attribute
	 *     XAttribute returns attribute
	 *
	 * Constraint:
	 *     {attribute}
	 */
	protected void sequence_XAttribute(ISerializationContext context, attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPackage returns XPackage
	 *
	 * Constraint:
	 *     (name=ID elements+=XElement*)
	 */
	protected void sequence_XPackage(ISerializationContext context, XPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XRange returns range
	 *
	 * Constraint:
	 *     units+=XUnit*
	 */
	protected void sequence_XRange_XUnits(ISerializationContext context, range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XElement returns range
	 *     XType returns range
	 *
	 * Constraint:
	 *     {range}
	 */
	protected void sequence_XRange(ISerializationContext context, range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XElement returns signal
	 *     XSignal returns signal
	 *
	 * Constraint:
	 *     {signal}
	 */
	protected void sequence_XSignal(ISerializationContext context, signal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XElement returns subtype
	 *     XSubType returns subtype
	 *
	 * Constraint:
	 *     {subtype}
	 */
	protected void sequence_XSubType(ISerializationContext context, subtype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XElement returns type
	 *     XType returns type
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_XType(ISerializationContext context, type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XhdlPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XhdlPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXTypeAccess().getNameIDTerminalRuleCall_0_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XUnits returns units
	 *
	 * Constraint:
	 *     units+=XUnit*
	 */
	protected void sequence_XUnits(ISerializationContext context, units semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     xhdl returns xhdl
	 *
	 * Constraint:
	 *     packages+=XPackage+
	 */
	protected void sequence_xhdl(ISerializationContext context, xhdl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
