/*
 * generated by Xtext 2.15.0
 */
package xproject.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xproject.services.XHDLGrammarAccess;

@SuppressWarnings("all")
public class XHDLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XHDLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_XEnums_CommaKeyword_2_0_q;
	protected AbstractElementAlias match_XRangeValue___ApostropheKeyword_1_1_1_or_IDTerminalRuleCall_1_1_0_or_IDTerminalRuleCall_1_1_2__p;
	protected AbstractElementAlias match_XSignal___SemicolonEqualsSignKeyword_5_0_IDTerminalRuleCall_5_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XHDLGrammarAccess) access;
		match_XEnums_CommaKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getXEnumsAccess().getCommaKeyword_2_0());
		match_XRangeValue___ApostropheKeyword_1_1_1_or_IDTerminalRuleCall_1_1_0_or_IDTerminalRuleCall_1_1_2__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getApostropheKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getIDTerminalRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getIDTerminalRuleCall_1_1_2()));
		match_XSignal___SemicolonEqualsSignKeyword_5_0_IDTerminalRuleCall_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXSignalAccess().getSemicolonEqualsSignKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getXSignalAccess().getIDTerminalRuleCall_5_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_XEnums_CommaKeyword_2_0_q.equals(syntax))
				emit_XEnums_CommaKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XRangeValue___ApostropheKeyword_1_1_1_or_IDTerminalRuleCall_1_1_0_or_IDTerminalRuleCall_1_1_2__p.equals(syntax))
				emit_XRangeValue___ApostropheKeyword_1_1_1_or_IDTerminalRuleCall_1_1_0_or_IDTerminalRuleCall_1_1_2__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XSignal___SemicolonEqualsSignKeyword_5_0_IDTerminalRuleCall_5_1__q.equals(syntax))
				emit_XSignal___SemicolonEqualsSignKeyword_5_0_IDTerminalRuleCall_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) xenums+=ID
	 *     xenums+=ID (ambiguity) xenums+=ID
	 */
	protected void emit_XEnums_CommaKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID | ''' | ID)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XRangeValue___ApostropheKeyword_1_1_1_or_IDTerminalRuleCall_1_1_0_or_IDTerminalRuleCall_1_1_2__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (';=' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     xtype=[XTypeRef|ID] (ambiguity) ';' (rule end)
	 */
	protected void emit_XSignal___SemicolonEqualsSignKeyword_5_0_IDTerminalRuleCall_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
