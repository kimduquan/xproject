/*
 * generated by Xtext 2.15.0
 */
package xproject.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xproject.services.XHDLGrammarAccess;

@SuppressWarnings("all")
public class XHDLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XHDLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__a;
	protected AbstractElementAlias match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__p;
	protected AbstractElementAlias match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__a;
	protected AbstractElementAlias match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__p;
	protected AbstractElementAlias match_XEnums___CommaKeyword_1_1_0_or_LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2__a;
	protected AbstractElementAlias match_XFileOf_FileKeyword_1_0_a;
	protected AbstractElementAlias match_XFileOf_FileKeyword_1_0_p;
	protected AbstractElementAlias match_XFileRef_ColonKeyword_2_1_a;
	protected AbstractElementAlias match_XFileRef_ColonKeyword_2_1_p;
	protected AbstractElementAlias match_XFunction_SemicolonKeyword_2_3_a;
	protected AbstractElementAlias match_XFunction_SemicolonKeyword_2_3_p;
	protected AbstractElementAlias match_XImpure_ImpureKeyword_0_a;
	protected AbstractElementAlias match_XImpure_ImpureKeyword_0_p;
	protected AbstractElementAlias match_XInput_ColonKeyword_0_1_1_a;
	protected AbstractElementAlias match_XInput_ColonKeyword_0_1_1_p;
	protected AbstractElementAlias match_XInputs___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a;
	protected AbstractElementAlias match_XPackage_SemicolonKeyword_5_1_a;
	protected AbstractElementAlias match_XPackage_SemicolonKeyword_5_1_p;
	protected AbstractElementAlias match_XParameter___ColonEqualsSignKeyword_1_3_0_or_ColonKeyword_1_1__a;
	protected AbstractElementAlias match_XParameters___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a;
	protected AbstractElementAlias match_XProcedure_SemicolonKeyword_2_2_a;
	protected AbstractElementAlias match_XProcedure_SemicolonKeyword_2_2_p;
	protected AbstractElementAlias match_XRangeValue___IDTerminalRuleCall_1_1_1_or___IDTerminalRuleCall_1_1_0_0_ApostropheKeyword_1_1_0_1____p;
	protected AbstractElementAlias match_XSignal___IDTerminalRuleCall_2_2_1_or_SemicolonEqualsSignKeyword_2_2_0_or_SemicolonKeyword_2_3__a;
	protected AbstractElementAlias match_XSubType_SemicolonKeyword_4_1_a;
	protected AbstractElementAlias match_XSubType_SemicolonKeyword_4_1_p;
	protected AbstractElementAlias match_XType_SemicolonKeyword_4_1_a;
	protected AbstractElementAlias match_XType_SemicolonKeyword_4_1_p;
	protected AbstractElementAlias match_XUnit_EqualsSignKeyword_1_0_1_0_a;
	protected AbstractElementAlias match_XUnit_SemicolonKeyword_1_1_a;
	protected AbstractElementAlias match_XUnit_SemicolonKeyword_1_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XHDLGrammarAccess) access;
		match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXArrayAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getXArrayAccess().getRightParenthesisKeyword_2_2()));
		match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getXArrayAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getXArrayAccess().getRightParenthesisKeyword_2_2()));
		match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXAttributeAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getXAttributeAccess().getSemicolonKeyword_2_3()));
		match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getXAttributeAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getXAttributeAccess().getSemicolonKeyword_2_3()));
		match_XEnums___CommaKeyword_1_1_0_or_LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXEnumsAccess().getCommaKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getXEnumsAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getXEnumsAccess().getRightParenthesisKeyword_1_2()));
		match_XFileOf_FileKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getXFileOfAccess().getFileKeyword_1_0());
		match_XFileOf_FileKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getXFileOfAccess().getFileKeyword_1_0());
		match_XFileRef_ColonKeyword_2_1_a = new TokenAlias(true, true, grammarAccess.getXFileRefAccess().getColonKeyword_2_1());
		match_XFileRef_ColonKeyword_2_1_p = new TokenAlias(true, false, grammarAccess.getXFileRefAccess().getColonKeyword_2_1());
		match_XFunction_SemicolonKeyword_2_3_a = new TokenAlias(true, true, grammarAccess.getXFunctionAccess().getSemicolonKeyword_2_3());
		match_XFunction_SemicolonKeyword_2_3_p = new TokenAlias(true, false, grammarAccess.getXFunctionAccess().getSemicolonKeyword_2_3());
		match_XImpure_ImpureKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXImpureAccess().getImpureKeyword_0());
		match_XImpure_ImpureKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXImpureAccess().getImpureKeyword_0());
		match_XInput_ColonKeyword_0_1_1_a = new TokenAlias(true, true, grammarAccess.getXInputAccess().getColonKeyword_0_1_1());
		match_XInput_ColonKeyword_0_1_1_p = new TokenAlias(true, false, grammarAccess.getXInputAccess().getColonKeyword_0_1_1());
		match_XInputs___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXInputsAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getXInputsAccess().getRightParenthesisKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getXInputsAccess().getSemicolonKeyword_1_1_0()));
		match_XPackage_SemicolonKeyword_5_1_a = new TokenAlias(true, true, grammarAccess.getXPackageAccess().getSemicolonKeyword_5_1());
		match_XPackage_SemicolonKeyword_5_1_p = new TokenAlias(true, false, grammarAccess.getXPackageAccess().getSemicolonKeyword_5_1());
		match_XParameter___ColonEqualsSignKeyword_1_3_0_or_ColonKeyword_1_1__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXParameterAccess().getColonEqualsSignKeyword_1_3_0()), new TokenAlias(false, false, grammarAccess.getXParameterAccess().getColonKeyword_1_1()));
		match_XParameters___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXParametersAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getXParametersAccess().getRightParenthesisKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getXParametersAccess().getSemicolonKeyword_1_1_0()));
		match_XProcedure_SemicolonKeyword_2_2_a = new TokenAlias(true, true, grammarAccess.getXProcedureAccess().getSemicolonKeyword_2_2());
		match_XProcedure_SemicolonKeyword_2_2_p = new TokenAlias(true, false, grammarAccess.getXProcedureAccess().getSemicolonKeyword_2_2());
		match_XRangeValue___IDTerminalRuleCall_1_1_1_or___IDTerminalRuleCall_1_1_0_0_ApostropheKeyword_1_1_0_1____p = new AlternativeAlias(true, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getIDTerminalRuleCall_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getApostropheKeyword_1_1_0_1())), new TokenAlias(false, false, grammarAccess.getXRangeValueAccess().getIDTerminalRuleCall_1_1_1()));
		match_XSignal___IDTerminalRuleCall_2_2_1_or_SemicolonEqualsSignKeyword_2_2_0_or_SemicolonKeyword_2_3__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getXSignalAccess().getIDTerminalRuleCall_2_2_1()), new TokenAlias(false, false, grammarAccess.getXSignalAccess().getSemicolonEqualsSignKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getXSignalAccess().getSemicolonKeyword_2_3()));
		match_XSubType_SemicolonKeyword_4_1_a = new TokenAlias(true, true, grammarAccess.getXSubTypeAccess().getSemicolonKeyword_4_1());
		match_XSubType_SemicolonKeyword_4_1_p = new TokenAlias(true, false, grammarAccess.getXSubTypeAccess().getSemicolonKeyword_4_1());
		match_XType_SemicolonKeyword_4_1_a = new TokenAlias(true, true, grammarAccess.getXTypeAccess().getSemicolonKeyword_4_1());
		match_XType_SemicolonKeyword_4_1_p = new TokenAlias(true, false, grammarAccess.getXTypeAccess().getSemicolonKeyword_4_1());
		match_XUnit_EqualsSignKeyword_1_0_1_0_a = new TokenAlias(true, true, grammarAccess.getXUnitAccess().getEqualsSignKeyword_1_0_1_0());
		match_XUnit_SemicolonKeyword_1_1_a = new TokenAlias(true, true, grammarAccess.getXUnitAccess().getSemicolonKeyword_1_1());
		match_XUnit_SemicolonKeyword_1_1_p = new TokenAlias(true, false, grammarAccess.getXUnitAccess().getSemicolonKeyword_1_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__a.equals(syntax))
				emit_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__p.equals(syntax))
				emit_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__a.equals(syntax))
				emit_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__p.equals(syntax))
				emit_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XEnums___CommaKeyword_1_1_0_or_LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2__a.equals(syntax))
				emit_XEnums___CommaKeyword_1_1_0_or_LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFileOf_FileKeyword_1_0_a.equals(syntax))
				emit_XFileOf_FileKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFileOf_FileKeyword_1_0_p.equals(syntax))
				emit_XFileOf_FileKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFileRef_ColonKeyword_2_1_a.equals(syntax))
				emit_XFileRef_ColonKeyword_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFileRef_ColonKeyword_2_1_p.equals(syntax))
				emit_XFileRef_ColonKeyword_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunction_SemicolonKeyword_2_3_a.equals(syntax))
				emit_XFunction_SemicolonKeyword_2_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunction_SemicolonKeyword_2_3_p.equals(syntax))
				emit_XFunction_SemicolonKeyword_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImpure_ImpureKeyword_0_a.equals(syntax))
				emit_XImpure_ImpureKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImpure_ImpureKeyword_0_p.equals(syntax))
				emit_XImpure_ImpureKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XInput_ColonKeyword_0_1_1_a.equals(syntax))
				emit_XInput_ColonKeyword_0_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XInput_ColonKeyword_0_1_1_p.equals(syntax))
				emit_XInput_ColonKeyword_0_1_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XInputs___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a.equals(syntax))
				emit_XInputs___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XPackage_SemicolonKeyword_5_1_a.equals(syntax))
				emit_XPackage_SemicolonKeyword_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XPackage_SemicolonKeyword_5_1_p.equals(syntax))
				emit_XPackage_SemicolonKeyword_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParameter___ColonEqualsSignKeyword_1_3_0_or_ColonKeyword_1_1__a.equals(syntax))
				emit_XParameter___ColonEqualsSignKeyword_1_3_0_or_ColonKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParameters___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a.equals(syntax))
				emit_XParameters___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XProcedure_SemicolonKeyword_2_2_a.equals(syntax))
				emit_XProcedure_SemicolonKeyword_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XProcedure_SemicolonKeyword_2_2_p.equals(syntax))
				emit_XProcedure_SemicolonKeyword_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XRangeValue___IDTerminalRuleCall_1_1_1_or___IDTerminalRuleCall_1_1_0_0_ApostropheKeyword_1_1_0_1____p.equals(syntax))
				emit_XRangeValue___IDTerminalRuleCall_1_1_1_or___IDTerminalRuleCall_1_1_0_0_ApostropheKeyword_1_1_0_1____p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XSignal___IDTerminalRuleCall_2_2_1_or_SemicolonEqualsSignKeyword_2_2_0_or_SemicolonKeyword_2_3__a.equals(syntax))
				emit_XSignal___IDTerminalRuleCall_2_2_1_or_SemicolonEqualsSignKeyword_2_2_0_or_SemicolonKeyword_2_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XSubType_SemicolonKeyword_4_1_a.equals(syntax))
				emit_XSubType_SemicolonKeyword_4_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XSubType_SemicolonKeyword_4_1_p.equals(syntax))
				emit_XSubType_SemicolonKeyword_4_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XType_SemicolonKeyword_4_1_a.equals(syntax))
				emit_XType_SemicolonKeyword_4_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XType_SemicolonKeyword_4_1_p.equals(syntax))
				emit_XType_SemicolonKeyword_4_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XUnit_EqualsSignKeyword_1_0_1_0_a.equals(syntax))
				emit_XUnit_EqualsSignKeyword_1_0_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XUnit_SemicolonKeyword_1_1_a.equals(syntax))
				emit_XUnit_SemicolonKeyword_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XUnit_SemicolonKeyword_1_1_p.equals(syntax))
				emit_XUnit_SemicolonKeyword_1_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' | ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'array' (ambiguity) xrange=XTypeRef
	 *     xrange=XTypeRef 'range' '<>' (ambiguity) 'of' xof=XTypeRef
	 *     xrange=XTypeRef 'range' '<>' (ambiguity) xrange=XTypeRef
	 */
	protected void emit_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | ')')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'array' (ambiguity) 'of' xof=XTypeRef
	 */
	protected void emit_XArray___LeftParenthesisKeyword_2_0_or_RightParenthesisKeyword_2_2__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' | ';')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'attribute' (ambiguity) name=ID
	 *     (rule start) 'attribute' (ambiguity) xtype=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) (rule end)
	 *     xtype=XTypeRef (ambiguity) name=ID
	 *     xtype=XTypeRef (ambiguity) xtype=XTypeRef
	 */
	protected void emit_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' | ';')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'attribute' (ambiguity) (rule start)
	 */
	protected void emit_XAttribute___ColonKeyword_2_1_or_SemicolonKeyword_2_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | ',' | ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) xenums+=XEnum
	 *     xenums+=XEnum (ambiguity) (rule end)
	 *     xenums+=XEnum (ambiguity) xenums+=XEnum
	 */
	protected void emit_XEnums___CommaKeyword_1_1_0_or_LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'file'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'of' xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) 'of' xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) (rule end)
	 */
	protected void emit_XFileOf_FileKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'file'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XFileOf_FileKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'file' (ambiguity) name=ID
	 *     (rule start) 'file' (ambiguity) xtype=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) (rule end)
	 *     xtype=XTypeRef (ambiguity) name=ID
	 *     xtype=XTypeRef (ambiguity) xtype=XTypeRef
	 */
	protected void emit_XFileRef_ColonKeyword_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'file' (ambiguity) (rule start)
	 */
	protected void emit_XFileRef_ColonKeyword_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'function' (ambiguity) 'return' xreturn=XTypeRef
	 *     (rule start) 'function' (ambiguity) name=ID
	 *     (rule start) 'function' (ambiguity) xparameters=XParameters
	 *     name=ID (ambiguity) 'return' xreturn=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xparameters=XParameters
	 *     xparameters=XParameters (ambiguity) 'return' xreturn=XTypeRef
	 *     xparameters=XParameters (ambiguity) (rule end)
	 *     xparameters=XParameters (ambiguity) name=ID
	 *     xparameters=XParameters (ambiguity) xparameters=XParameters
	 *     xreturn=XTypeRef (ambiguity) 'return' xreturn=XTypeRef
	 *     xreturn=XTypeRef (ambiguity) (rule end)
	 *     xreturn=XTypeRef (ambiguity) name=ID
	 *     xreturn=XTypeRef (ambiguity) xparameters=XParameters
	 */
	protected void emit_XFunction_SemicolonKeyword_2_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'function' (ambiguity) (rule start)
	 */
	protected void emit_XFunction_SemicolonKeyword_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'impure'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) xfunc=XFunction
	 *     xfunc=XFunction (ambiguity) (rule end)
	 *     xfunc=XFunction (ambiguity) xfunc=XFunction
	 */
	protected void emit_XImpure_ImpureKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'impure'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XImpure_ImpureKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) xinout='in'
	 *     (rule start) (ambiguity) xinout='inout'
	 *     (rule start) (ambiguity) xinout='out'
	 *     (rule start) (ambiguity) xtyp=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xinout='in'
	 *     name=ID (ambiguity) xinout='inout'
	 *     name=ID (ambiguity) xinout='out'
	 *     name=ID (ambiguity) xtyp=XTypeRef
	 *     xtyp=XTypeRef (ambiguity) (rule end)
	 *     xtyp=XTypeRef (ambiguity) name=ID
	 *     xtyp=XTypeRef (ambiguity) xinout='in'
	 *     xtyp=XTypeRef (ambiguity) xinout='inout'
	 *     xtyp=XTypeRef (ambiguity) xinout='out'
	 *     xtyp=XTypeRef (ambiguity) xtyp=XTypeRef
	 */
	protected void emit_XInput_ColonKeyword_0_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XInput_ColonKeyword_0_1_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | ';' | ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) xinputs+=XInput
	 *     xinputs+=XInput (ambiguity) (rule end)
	 *     xinputs+=XInput (ambiguity) xinputs+=XInput
	 */
	protected void emit_XInputs___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' 'end' (ambiguity) xend=XPackageRef
	 *     xend=XPackageRef (ambiguity) (rule end)
	 *     xend=XPackageRef (ambiguity) xend=XPackageRef
	 *     xis+=XElement 'end' (ambiguity) xend=XPackageRef
	 */
	protected void emit_XPackage_SemicolonKeyword_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' 'end' (ambiguity) (rule end)
	 *     xis+=XElement 'end' (ambiguity) (rule end)
	 */
	protected void emit_XPackage_SemicolonKeyword_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' | ':=')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) xdefaultValue=ID
	 *     (rule start) (ambiguity) xtype=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xdefaultValue=ID
	 *     name=ID (ambiguity) xtype=XTypeRef
	 *     xdefaultValue=ID (ambiguity) (rule end)
	 *     xdefaultValue=ID (ambiguity) name=ID
	 *     xdefaultValue=ID (ambiguity) xdefaultValue=ID
	 *     xdefaultValue=ID (ambiguity) xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) (rule end)
	 *     xtype=XTypeRef (ambiguity) name=ID
	 *     xtype=XTypeRef (ambiguity) xdefaultValue=ID
	 *     xtype=XTypeRef (ambiguity) xtype=XTypeRef
	 */
	protected void emit_XParameter___ColonEqualsSignKeyword_1_3_0_or_ColonKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | ';' | ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) xparameters+=XParameter
	 *     xparameters+=XParameter (ambiguity) (rule end)
	 *     xparameters+=XParameter (ambiguity) xparameters+=XParameter
	 */
	protected void emit_XParameters___LeftParenthesisKeyword_1_0_or_RightParenthesisKeyword_1_2_or_SemicolonKeyword_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'procedure' (ambiguity) name=ID
	 *     (rule start) 'procedure' (ambiguity) xinputs=XInputs
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     name=ID (ambiguity) xinputs=XInputs
	 *     xinputs=XInputs (ambiguity) (rule end)
	 *     xinputs=XInputs (ambiguity) name=ID
	 *     xinputs=XInputs (ambiguity) xinputs=XInputs
	 */
	protected void emit_XProcedure_SemicolonKeyword_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'procedure' (ambiguity) (rule start)
	 */
	protected void emit_XProcedure_SemicolonKeyword_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((ID ''') | ID)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XRangeValue___IDTerminalRuleCall_1_1_1_or___IDTerminalRuleCall_1_1_0_0_ApostropheKeyword_1_1_0_1____p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (';=' | ID | ';')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'signal' (ambiguity) ':' xtype=XTypeRef
	 *     (rule start) 'signal' (ambiguity) (rule start)
	 *     (rule start) 'signal' (ambiguity) name=ID
	 *     name=ID (ambiguity) ':' xtype=XTypeRef
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) name=ID
	 *     xtype=XTypeRef (ambiguity) ':' xtype=XTypeRef
	 *     xtype=XTypeRef (ambiguity) (rule end)
	 *     xtype=XTypeRef (ambiguity) name=ID
	 */
	protected void emit_XSignal___IDTerminalRuleCall_2_2_1_or_SemicolonEqualsSignKeyword_2_2_0_or_SemicolonKeyword_2_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' (ambiguity) xis=XTypeRef
	 *     xis=XTypeRef (ambiguity) (rule end)
	 *     xis=XTypeRef (ambiguity) xis=XTypeRef
	 *     xrange=XRange (ambiguity) (rule end)
	 *     xrange=XRange (ambiguity) xis=XTypeRef
	 */
	protected void emit_XSubType_SemicolonKeyword_4_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' (ambiguity) (rule end)
	 */
	protected void emit_XSubType_SemicolonKeyword_4_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' (ambiguity) xaccess=XAccess
	 *     name=ID 'is' (ambiguity) xarray=XArray
	 *     name=ID 'is' (ambiguity) xenums=XEnums
	 *     name=ID 'is' (ambiguity) xfileOf=XFileOf
	 *     name=ID 'is' (ambiguity) xrange=XRange
	 *     xaccess=XAccess (ambiguity) (rule end)
	 *     xaccess=XAccess (ambiguity) xaccess=XAccess
	 *     xaccess=XAccess (ambiguity) xarray=XArray
	 *     xaccess=XAccess (ambiguity) xenums=XEnums
	 *     xaccess=XAccess (ambiguity) xfileOf=XFileOf
	 *     xaccess=XAccess (ambiguity) xrange=XRange
	 *     xarray=XArray (ambiguity) (rule end)
	 *     xarray=XArray (ambiguity) xaccess=XAccess
	 *     xarray=XArray (ambiguity) xarray=XArray
	 *     xarray=XArray (ambiguity) xenums=XEnums
	 *     xarray=XArray (ambiguity) xfileOf=XFileOf
	 *     xarray=XArray (ambiguity) xrange=XRange
	 *     xenums=XEnums (ambiguity) (rule end)
	 *     xenums=XEnums (ambiguity) xaccess=XAccess
	 *     xenums=XEnums (ambiguity) xarray=XArray
	 *     xenums=XEnums (ambiguity) xenums=XEnums
	 *     xenums=XEnums (ambiguity) xfileOf=XFileOf
	 *     xenums=XEnums (ambiguity) xrange=XRange
	 *     xfileOf=XFileOf (ambiguity) (rule end)
	 *     xfileOf=XFileOf (ambiguity) xaccess=XAccess
	 *     xfileOf=XFileOf (ambiguity) xarray=XArray
	 *     xfileOf=XFileOf (ambiguity) xenums=XEnums
	 *     xfileOf=XFileOf (ambiguity) xfileOf=XFileOf
	 *     xfileOf=XFileOf (ambiguity) xrange=XRange
	 *     xrange=XRange (ambiguity) (rule end)
	 *     xrange=XRange (ambiguity) xaccess=XAccess
	 *     xrange=XRange (ambiguity) xarray=XArray
	 *     xrange=XRange (ambiguity) xenums=XEnums
	 *     xrange=XRange (ambiguity) xfileOf=XFileOf
	 *     xrange=XRange (ambiguity) xrange=XRange
	 */
	protected void emit_XType_SemicolonKeyword_4_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' (ambiguity) (rule end)
	 */
	protected void emit_XType_SemicolonKeyword_4_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';'* (rule end)
	 *     name=ID (ambiguity) ';'* name=ID
	 *     name=ID (ambiguity) xvalue=INT
	 *     xbased=XUnitRef (ambiguity) ';'* (rule end)
	 *     xbased=XUnitRef (ambiguity) ';'* name=ID
	 *     xbased=XUnitRef (ambiguity) xvalue=INT
	 */
	protected void emit_XUnit_EqualsSignKeyword_1_0_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     name=ID '='* (ambiguity) (rule end)
	 *     name=ID '='* (ambiguity) name=ID
	 *     xbased=XUnitRef '='* (ambiguity) (rule end)
	 *     xbased=XUnitRef '='* (ambiguity) name=ID
	 */
	protected void emit_XUnit_SemicolonKeyword_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_XUnit_SemicolonKeyword_1_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
