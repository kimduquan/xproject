/*
 * generated by Xtext 2.15.0
 */
package xproject.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XHDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XhdlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.xhdl");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesXPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//xhdl:
		//	packages+=XPackage*;
		@Override public ParserRule getRule() { return rule; }
		
		//packages+=XPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }
		
		//XPackage
		public RuleCall getPackagesXPackageParserRuleCall_0() { return cPackagesXPackageParserRuleCall_0; }
	}
	public class XPackageRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XPackageRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXPackageRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XPackageRef:
		//	{XPackageRef} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{XPackageRef} name=ID
		public Group getGroup() { return cGroup; }
		
		//{XPackageRef}
		public Action getXPackageRefAction_0() { return cXPackageRefAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXisXElementParserRuleCall_3_0 = (RuleCall)cXisAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Assignment cXendAssignment_5_0 = (Assignment)cUnorderedGroup_5.eContents().get(0);
		private final RuleCall cXendXPackageRefParserRuleCall_5_0_0 = (RuleCall)cXendAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cUnorderedGroup_5.eContents().get(1);
		
		//XPackage:
		//	'package' name=ID 'is'
		//	xis+=XElement*
		//	'end' (xend=XPackageRef & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID 'is' xis+=XElement* 'end' (xend=XPackageRef & ';')
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//xis+=XElement*
		public Assignment getXisAssignment_3() { return cXisAssignment_3; }
		
		//XElement
		public RuleCall getXisXElementParserRuleCall_3_0() { return cXisXElementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//xend=XPackageRef & ';'
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }
		
		//xend=XPackageRef
		public Assignment getXendAssignment_5_0() { return cXendAssignment_5_0; }
		
		//XPackageRef
		public RuleCall getXendXPackageRefParserRuleCall_5_0_0() { return cXendXPackageRefParserRuleCall_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}
	public class XTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XTypeRef:
		//	{XTypeRef} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{XTypeRef} name=ID
		public Group getGroup() { return cGroup; }
		
		//{XTypeRef}
		public Action getXTypeRefAction_0() { return cXTypeRefAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSubTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXImpureParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XElement:
		//	XType | XSignal | XSubType | XAttribute | XImpure;
		@Override public ParserRule getRule() { return rule; }
		
		//XType | XSignal | XSubType | XAttribute | XImpure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XType
		public RuleCall getXTypeParserRuleCall_0() { return cXTypeParserRuleCall_0; }
		
		//XSignal
		public RuleCall getXSignalParserRuleCall_1() { return cXSignalParserRuleCall_1; }
		
		//XSubType
		public RuleCall getXSubTypeParserRuleCall_2() { return cXSubTypeParserRuleCall_2; }
		
		//XAttribute
		public RuleCall getXAttributeParserRuleCall_3() { return cXAttributeParserRuleCall_3; }
		
		//XImpure
		public RuleCall getXImpureParserRuleCall_4() { return cXImpureParserRuleCall_4; }
	}
	public class XAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cUnorderedGroup_2.eContents().get(1);
		private final Assignment cXtypeAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cXtypeXTypeRefParserRuleCall_2_2_0 = (RuleCall)cXtypeAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cUnorderedGroup_2.eContents().get(3);
		
		//XAttribute:
		//	{XAttribute} 'attribute' (name=ID & ':' & xtype=XTypeRef & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{XAttribute} 'attribute' (name=ID & ':' & xtype=XTypeRef & ';')
		public Group getGroup() { return cGroup; }
		
		//{XAttribute}
		public Action getXAttributeAction_0() { return cXAttributeAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID & ':' & xtype=XTypeRef & ';'
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//xtype=XTypeRef
		public Assignment getXtypeAssignment_2_2() { return cXtypeAssignment_2_2; }
		
		//XTypeRef
		public RuleCall getXtypeXTypeRefParserRuleCall_2_2_0() { return cXtypeXTypeRefParserRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}
	public class XSubTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XSubType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSubTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Assignment cXisAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cXisXTypeRefParserRuleCall_4_0_0_0 = (RuleCall)cXisAssignment_4_0_0.eContents().get(0);
		private final Assignment cXrangeAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cXrangeXRangeParserRuleCall_4_0_1_0 = (RuleCall)cXrangeAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cUnorderedGroup_4.eContents().get(1);
		
		//XSubType:
		//	{XSubType} 'subtype' name=ID 'is' (xis=XTypeRef xrange=XRange? & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{XSubType} 'subtype' name=ID 'is' (xis=XTypeRef xrange=XRange? & ';')
		public Group getGroup() { return cGroup; }
		
		//{XSubType}
		public Action getXSubTypeAction_0() { return cXSubTypeAction_0; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_1() { return cSubtypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//xis=XTypeRef xrange=XRange? & ';'
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//xis=XTypeRef xrange=XRange?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//xis=XTypeRef
		public Assignment getXisAssignment_4_0_0() { return cXisAssignment_4_0_0; }
		
		//XTypeRef
		public RuleCall getXisXTypeRefParserRuleCall_4_0_0_0() { return cXisXTypeRefParserRuleCall_4_0_0_0; }
		
		//xrange=XRange?
		public Assignment getXrangeAssignment_4_0_1() { return cXrangeAssignment_4_0_1; }
		
		//XRange
		public RuleCall getXrangeXRangeParserRuleCall_4_0_1_0() { return cXrangeXRangeParserRuleCall_4_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class XSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cXtypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cXtypeXTypeRefParserRuleCall_2_1_1_0 = (RuleCall)cXtypeAssignment_2_1_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_2 = (UnorderedGroup)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cSemicolonEqualsSignKeyword_2_2_0 = (Keyword)cUnorderedGroup_2_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_2_1 = (RuleCall)cUnorderedGroup_2_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cUnorderedGroup_2.eContents().get(3);
		
		//XSignal:
		//	{XSignal} 'signal' (name=ID & ':' xtype=XTypeRef & (';=' & ID)? & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{XSignal} 'signal' (name=ID & ':' xtype=XTypeRef & (';=' & ID)? & ';')
		public Group getGroup() { return cGroup; }
		
		//{XSignal}
		public Action getXSignalAction_0() { return cXSignalAction_0; }
		
		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//name=ID & ':' xtype=XTypeRef & (';=' & ID)? & ';'
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//':' xtype=XTypeRef
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//':'
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }
		
		//xtype=XTypeRef
		public Assignment getXtypeAssignment_2_1_1() { return cXtypeAssignment_2_1_1; }
		
		//XTypeRef
		public RuleCall getXtypeXTypeRefParserRuleCall_2_1_1_0() { return cXtypeXTypeRefParserRuleCall_2_1_1_0; }
		
		//(';=' & ID)?
		public UnorderedGroup getUnorderedGroup_2_2() { return cUnorderedGroup_2_2; }
		
		//';='
		public Keyword getSemicolonEqualsSignKeyword_2_2_0() { return cSemicolonEqualsSignKeyword_2_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_2_1() { return cIDTerminalRuleCall_2_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}
	public class XTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cUnorderedGroup_4.eContents().get(0);
		private final Assignment cXenumsAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cXenumsXEnumsParserRuleCall_4_0_0_0 = (RuleCall)cXenumsAssignment_4_0_0.eContents().get(0);
		private final Assignment cXrangeAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cXrangeXRangeParserRuleCall_4_0_1_0 = (RuleCall)cXrangeAssignment_4_0_1.eContents().get(0);
		private final Assignment cXarrayAssignment_4_0_2 = (Assignment)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cXarrayXArrayParserRuleCall_4_0_2_0 = (RuleCall)cXarrayAssignment_4_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cUnorderedGroup_4.eContents().get(1);
		
		//XType:
		//	{XType} 'type' name=ID 'is' ((xenums=XEnums | xrange=XRange | xarray=XArray) & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{XType} 'type' name=ID 'is' ((xenums=XEnums | xrange=XRange | xarray=XArray) & ';')
		public Group getGroup() { return cGroup; }
		
		//{XType}
		public Action getXTypeAction_0() { return cXTypeAction_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//(xenums=XEnums | xrange=XRange | xarray=XArray) & ';'
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//(xenums=XEnums | xrange=XRange | xarray=XArray)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//xenums=XEnums
		public Assignment getXenumsAssignment_4_0_0() { return cXenumsAssignment_4_0_0; }
		
		//XEnums
		public RuleCall getXenumsXEnumsParserRuleCall_4_0_0_0() { return cXenumsXEnumsParserRuleCall_4_0_0_0; }
		
		//xrange=XRange
		public Assignment getXrangeAssignment_4_0_1() { return cXrangeAssignment_4_0_1; }
		
		//XRange
		public RuleCall getXrangeXRangeParserRuleCall_4_0_1_0() { return cXrangeXRangeParserRuleCall_4_0_1_0; }
		
		//xarray=XArray
		public Assignment getXarrayAssignment_4_0_2() { return cXarrayAssignment_4_0_2; }
		
		//XArray
		public RuleCall getXarrayXArrayParserRuleCall_4_0_2_0() { return cXarrayXArrayParserRuleCall_4_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class XArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cUnorderedGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Assignment cXrangeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cXrangeXTypeRefParserRuleCall_2_1_0_0 = (RuleCall)cXrangeAssignment_2_1_0.eContents().get(0);
		private final Keyword cRangeKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXofAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXofXTypeRefParserRuleCall_4_0 = (RuleCall)cXofAssignment_4.eContents().get(0);
		
		//XArray:
		//	{XArray} 'array' ('(' & xrange=XTypeRef 'range' '<>' & ')') 'of' xof=XTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{XArray} 'array' ('(' & xrange=XTypeRef 'range' '<>' & ')') 'of' xof=XTypeRef
		public Group getGroup() { return cGroup; }
		
		//{XArray}
		public Action getXArrayAction_0() { return cXArrayAction_0; }
		
		//'array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }
		
		//'(' & xrange=XTypeRef 'range' '<>' & ')'
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//xrange=XTypeRef 'range' '<>'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//xrange=XTypeRef
		public Assignment getXrangeAssignment_2_1_0() { return cXrangeAssignment_2_1_0; }
		
		//XTypeRef
		public RuleCall getXrangeXTypeRefParserRuleCall_2_1_0_0() { return cXrangeXTypeRefParserRuleCall_2_1_0_0; }
		
		//'range'
		public Keyword getRangeKeyword_2_1_1() { return cRangeKeyword_2_1_1; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_2_1_2() { return cLessThanSignGreaterThanSignKeyword_2_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//xof=XTypeRef
		public Assignment getXofAssignment_4() { return cXofAssignment_4; }
		
		//XTypeRef
		public RuleCall getXofXTypeRefParserRuleCall_4_0() { return cXofXTypeRefParserRuleCall_4_0; }
	}
	public class XRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXRangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXfromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXfromXRangeValueParserRuleCall_2_0 = (RuleCall)cXfromAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXtoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXtoXRangeValueParserRuleCall_4_0 = (RuleCall)cXtoAssignment_4.eContents().get(0);
		private final Assignment cXunitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXunitsXUnitsParserRuleCall_5_0 = (RuleCall)cXunitsAssignment_5.eContents().get(0);
		
		//XRange:
		//	{XRange} 'range' xfrom=XRangeValue 'to' xto=XRangeValue xunits=XUnits?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XRange} 'range' xfrom=XRangeValue 'to' xto=XRangeValue xunits=XUnits?
		public Group getGroup() { return cGroup; }
		
		//{XRange}
		public Action getXRangeAction_0() { return cXRangeAction_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//xfrom=XRangeValue
		public Assignment getXfromAssignment_2() { return cXfromAssignment_2; }
		
		//XRangeValue
		public RuleCall getXfromXRangeValueParserRuleCall_2_0() { return cXfromXRangeValueParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//xto=XRangeValue
		public Assignment getXtoAssignment_4() { return cXtoAssignment_4; }
		
		//XRangeValue
		public RuleCall getXtoXRangeValueParserRuleCall_4_0() { return cXtoXRangeValueParserRuleCall_4_0; }
		
		//xunits=XUnits?
		public Assignment getXunitsAssignment_5() { return cXunitsAssignment_5; }
		
		//XUnits
		public RuleCall getXunitsXUnitsParserRuleCall_5_0() { return cXunitsXUnitsParserRuleCall_5_0; }
	}
	public class XRangeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XRangeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXRangeValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cXlvalueAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cXlvalueXLONGTerminalRuleCall_1_0_0_0_0 = (RuleCall)cXlvalueAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cXdvalueAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cXdvalueXDOUBLETerminalRuleCall_1_0_0_1_0 = (RuleCall)cXdvalueAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cXunitAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cXunitXUnitRefParserRuleCall_1_0_1_0 = (RuleCall)cXunitAssignment_1_0_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cUnorderedGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Keyword cApostropheKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cUnorderedGroup_1_1.eContents().get(1);
		
		//XRangeValue:
		//	{XRangeValue} ((xlvalue=XLONG | xdvalue=XDOUBLE) xunit=XUnitRef? | ID '\'' & ID);
		@Override public ParserRule getRule() { return rule; }
		
		//{XRangeValue} ((xlvalue=XLONG | xdvalue=XDOUBLE) xunit=XUnitRef? | ID '\'' & ID)
		public Group getGroup() { return cGroup; }
		
		//{XRangeValue}
		public Action getXRangeValueAction_0() { return cXRangeValueAction_0; }
		
		//(xlvalue=XLONG | xdvalue=XDOUBLE) xunit=XUnitRef? | ID '\'' & ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(xlvalue=XLONG | xdvalue=XDOUBLE) xunit=XUnitRef?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//xlvalue=XLONG | xdvalue=XDOUBLE
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//xlvalue=XLONG
		public Assignment getXlvalueAssignment_1_0_0_0() { return cXlvalueAssignment_1_0_0_0; }
		
		//XLONG
		public RuleCall getXlvalueXLONGTerminalRuleCall_1_0_0_0_0() { return cXlvalueXLONGTerminalRuleCall_1_0_0_0_0; }
		
		//xdvalue=XDOUBLE
		public Assignment getXdvalueAssignment_1_0_0_1() { return cXdvalueAssignment_1_0_0_1; }
		
		//XDOUBLE
		public RuleCall getXdvalueXDOUBLETerminalRuleCall_1_0_0_1_0() { return cXdvalueXDOUBLETerminalRuleCall_1_0_0_1_0; }
		
		//xunit=XUnitRef?
		public Assignment getXunitAssignment_1_0_1() { return cXunitAssignment_1_0_1; }
		
		//XUnitRef
		public RuleCall getXunitXUnitRefParserRuleCall_1_0_1_0() { return cXunitXUnitRefParserRuleCall_1_0_1_0; }
		
		//ID '\'' & ID
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }
		
		//ID '\''
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_0() { return cIDTerminalRuleCall_1_1_0_0; }
		
		//'\''
		public Keyword getApostropheKeyword_1_1_0_1() { return cApostropheKeyword_1_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}
	public class XUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XUnits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXUnitsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXunitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXunitsXUnitParserRuleCall_2_0 = (RuleCall)cXunitsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XUnits:
		//	{XUnits} 'units' xunits+=XUnit* 'end' 'units';
		@Override public ParserRule getRule() { return rule; }
		
		//{XUnits} 'units' xunits+=XUnit* 'end' 'units'
		public Group getGroup() { return cGroup; }
		
		//{XUnits}
		public Action getXUnitsAction_0() { return cXUnitsAction_0; }
		
		//'units'
		public Keyword getUnitsKeyword_1() { return cUnitsKeyword_1; }
		
		//xunits+=XUnit*
		public Assignment getXunitsAssignment_2() { return cXunitsAssignment_2; }
		
		//XUnit
		public RuleCall getXunitsXUnitParserRuleCall_2_0() { return cXunitsXUnitParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
		
		//'units'
		public Keyword getUnitsKeyword_4() { return cUnitsKeyword_4; }
	}
	public class XUnitRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XUnitRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXUnitRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XUnitRef:
		//	{XUnitRef} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{XUnitRef} name=ID
		public Group getGroup() { return cGroup; }
		
		//{XUnitRef}
		public Action getXUnitRefAction_0() { return cXUnitRefAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_0_1 = (UnorderedGroup)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cUnorderedGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cUnorderedGroup_1_0_1.eContents().get(1);
		private final Assignment cXvalueAssignment_1_0_1_1_0 = (Assignment)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cXvalueINTTerminalRuleCall_1_0_1_1_0_0 = (RuleCall)cXvalueAssignment_1_0_1_1_0.eContents().get(0);
		private final Assignment cXbasedAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cXbasedXUnitRefParserRuleCall_1_0_1_1_1_0 = (RuleCall)cXbasedAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cUnorderedGroup_1.eContents().get(1);
		
		//XUnit:
		//	{XUnit} (name=ID ('=' & xvalue=INT xbased=XUnitRef)? & ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{XUnit} (name=ID ('=' & xvalue=INT xbased=XUnitRef)? & ';')
		public Group getGroup() { return cGroup; }
		
		//{XUnit}
		public Action getXUnitAction_0() { return cXUnitAction_0; }
		
		//name=ID ('=' & xvalue=INT xbased=XUnitRef)? & ';'
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//name=ID ('=' & xvalue=INT xbased=XUnitRef)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }
		
		//('=' & xvalue=INT xbased=XUnitRef)?
		public UnorderedGroup getUnorderedGroup_1_0_1() { return cUnorderedGroup_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//xvalue=INT xbased=XUnitRef
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//xvalue=INT
		public Assignment getXvalueAssignment_1_0_1_1_0() { return cXvalueAssignment_1_0_1_1_0; }
		
		//INT
		public RuleCall getXvalueINTTerminalRuleCall_1_0_1_1_0_0() { return cXvalueINTTerminalRuleCall_1_0_1_1_0_0; }
		
		//xbased=XUnitRef
		public Assignment getXbasedAssignment_1_0_1_1_1() { return cXbasedAssignment_1_0_1_1_1; }
		
		//XUnitRef
		public RuleCall getXbasedXUnitRefParserRuleCall_1_0_1_1_1_0() { return cXbasedXUnitRefParserRuleCall_1_0_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class XEnumsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XEnums");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXEnumsAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cUnorderedGroup_1_1.eContents().get(0);
		private final Assignment cXenumsAssignment_1_1_1 = (Assignment)cUnorderedGroup_1_1.eContents().get(1);
		private final RuleCall cXenumsXEnumParserRuleCall_1_1_1_0 = (RuleCall)cXenumsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cUnorderedGroup_1.eContents().get(2);
		
		//XEnums:
		//	{XEnums} ('(' & (','? & xenums+=XEnum)* & ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{XEnums} ('(' & (','? & xenums+=XEnum)* & ')')
		public Group getGroup() { return cGroup; }
		
		//{XEnums}
		public Action getXEnumsAction_0() { return cXEnumsAction_0; }
		
		//'(' & (','? & xenums+=XEnum)* & ')'
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(','? & xenums+=XEnum)*
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }
		
		//','?
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//xenums+=XEnum
		public Assignment getXenumsAssignment_1_1_1() { return cXenumsAssignment_1_1_1; }
		
		//XEnum
		public RuleCall getXenumsXEnumParserRuleCall_1_1_1_0() { return cXenumsXEnumParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class XFunctionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XFunctionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cReturnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXreturnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXreturnXTypeRefParserRuleCall_4_0 = (RuleCall)cXreturnAssignment_4.eContents().get(0);
		
		//XFunctionRef:
		//	{XFunctionRef} 'function' name=ID 'return' xreturn=XTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionRef} 'function' name=ID 'return' xreturn=XTypeRef
		public Group getGroup() { return cGroup; }
		
		//{XFunctionRef}
		public Action getXFunctionRefAction_0() { return cXFunctionRefAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'return'
		public Keyword getReturnKeyword_3() { return cReturnKeyword_3; }
		
		//xreturn=XTypeRef
		public Assignment getXreturnAssignment_4() { return cXreturnAssignment_4; }
		
		//XTypeRef
		public RuleCall getXreturnXTypeRefParserRuleCall_4_0() { return cXreturnXTypeRefParserRuleCall_4_0; }
	}
	public class XImpureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XImpure");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cImpureKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cXfuncAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cXfuncXFunctionRefParserRuleCall_0_1_0 = (RuleCall)cXfuncAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cUnorderedGroup.eContents().get(1);
		
		//XImpure:
		//	'impure' xfunc=XFunctionRef & ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'impure' xfunc=XFunctionRef & ';'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'impure' xfunc=XFunctionRef
		public Group getGroup_0() { return cGroup_0; }
		
		//'impure'
		public Keyword getImpureKeyword_0_0() { return cImpureKeyword_0_0; }
		
		//xfunc=XFunctionRef
		public Assignment getXfuncAssignment_0_1() { return cXfuncAssignment_0_1; }
		
		//XFunctionRef
		public RuleCall getXfuncXFunctionRefParserRuleCall_0_1_0() { return cXfuncXFunctionRefParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class XEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XEnum:
		//	ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private final XhdlElements pXhdl;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tXLONG;
	private final TerminalRule tXDOUBLE;
	private final XPackageRefElements pXPackageRef;
	private final XPackageElements pXPackage;
	private final XTypeRefElements pXTypeRef;
	private final XElementElements pXElement;
	private final XAttributeElements pXAttribute;
	private final XSubTypeElements pXSubType;
	private final XSignalElements pXSignal;
	private final XTypeElements pXType;
	private final XArrayElements pXArray;
	private final XRangeElements pXRange;
	private final XRangeValueElements pXRangeValue;
	private final XUnitsElements pXUnits;
	private final XUnitRefElements pXUnitRef;
	private final XUnitElements pXUnit;
	private final XEnumsElements pXEnums;
	private final XFunctionRefElements pXFunctionRef;
	private final XImpureElements pXImpure;
	private final XEnumElements pXEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XHDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXhdl = new XhdlElements();
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.COMMENT");
		this.tXLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XLONG");
		this.tXDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XDOUBLE");
		this.pXPackageRef = new XPackageRefElements();
		this.pXPackage = new XPackageElements();
		this.pXTypeRef = new XTypeRefElements();
		this.pXElement = new XElementElements();
		this.pXAttribute = new XAttributeElements();
		this.pXSubType = new XSubTypeElements();
		this.pXSignal = new XSignalElements();
		this.pXType = new XTypeElements();
		this.pXArray = new XArrayElements();
		this.pXRange = new XRangeElements();
		this.pXRangeValue = new XRangeValueElements();
		this.pXUnits = new XUnitsElements();
		this.pXUnitRef = new XUnitRefElements();
		this.pXUnit = new XUnitElements();
		this.pXEnums = new XEnumsElements();
		this.pXFunctionRef = new XFunctionRefElements();
		this.pXImpure = new XImpureElements();
		this.pXEnum = new XEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xproject.XHDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//xhdl:
	//	packages+=XPackage*;
	public XhdlElements getXhdlAccess() {
		return pXhdl;
	}
	
	public ParserRule getXhdlRule() {
		return getXhdlAccess().getRule();
	}
	
	//terminal COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal XLONG returns ecore::ELong:
	//	'-'? '0'..'9'+;
	public TerminalRule getXLONGRule() {
		return tXLONG;
	}
	
	//terminal XDOUBLE returns ecore::EDouble:
	//	'[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?';
	public TerminalRule getXDOUBLERule() {
		return tXDOUBLE;
	}
	
	//XPackageRef:
	//	{XPackageRef} name=ID;
	public XPackageRefElements getXPackageRefAccess() {
		return pXPackageRef;
	}
	
	public ParserRule getXPackageRefRule() {
		return getXPackageRefAccess().getRule();
	}
	
	//XPackage:
	//	'package' name=ID 'is'
	//	xis+=XElement*
	//	'end' (xend=XPackageRef & ';');
	public XPackageElements getXPackageAccess() {
		return pXPackage;
	}
	
	public ParserRule getXPackageRule() {
		return getXPackageAccess().getRule();
	}
	
	//XTypeRef:
	//	{XTypeRef} name=ID;
	public XTypeRefElements getXTypeRefAccess() {
		return pXTypeRef;
	}
	
	public ParserRule getXTypeRefRule() {
		return getXTypeRefAccess().getRule();
	}
	
	//XElement:
	//	XType | XSignal | XSubType | XAttribute | XImpure;
	public XElementElements getXElementAccess() {
		return pXElement;
	}
	
	public ParserRule getXElementRule() {
		return getXElementAccess().getRule();
	}
	
	//XAttribute:
	//	{XAttribute} 'attribute' (name=ID & ':' & xtype=XTypeRef & ';');
	public XAttributeElements getXAttributeAccess() {
		return pXAttribute;
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}
	
	//XSubType:
	//	{XSubType} 'subtype' name=ID 'is' (xis=XTypeRef xrange=XRange? & ';');
	public XSubTypeElements getXSubTypeAccess() {
		return pXSubType;
	}
	
	public ParserRule getXSubTypeRule() {
		return getXSubTypeAccess().getRule();
	}
	
	//XSignal:
	//	{XSignal} 'signal' (name=ID & ':' xtype=XTypeRef & (';=' & ID)? & ';');
	public XSignalElements getXSignalAccess() {
		return pXSignal;
	}
	
	public ParserRule getXSignalRule() {
		return getXSignalAccess().getRule();
	}
	
	//XType:
	//	{XType} 'type' name=ID 'is' ((xenums=XEnums | xrange=XRange | xarray=XArray) & ';');
	public XTypeElements getXTypeAccess() {
		return pXType;
	}
	
	public ParserRule getXTypeRule() {
		return getXTypeAccess().getRule();
	}
	
	//XArray:
	//	{XArray} 'array' ('(' & xrange=XTypeRef 'range' '<>' & ')') 'of' xof=XTypeRef;
	public XArrayElements getXArrayAccess() {
		return pXArray;
	}
	
	public ParserRule getXArrayRule() {
		return getXArrayAccess().getRule();
	}
	
	//XRange:
	//	{XRange} 'range' xfrom=XRangeValue 'to' xto=XRangeValue xunits=XUnits?;
	public XRangeElements getXRangeAccess() {
		return pXRange;
	}
	
	public ParserRule getXRangeRule() {
		return getXRangeAccess().getRule();
	}
	
	//XRangeValue:
	//	{XRangeValue} ((xlvalue=XLONG | xdvalue=XDOUBLE) xunit=XUnitRef? | ID '\'' & ID);
	public XRangeValueElements getXRangeValueAccess() {
		return pXRangeValue;
	}
	
	public ParserRule getXRangeValueRule() {
		return getXRangeValueAccess().getRule();
	}
	
	//XUnits:
	//	{XUnits} 'units' xunits+=XUnit* 'end' 'units';
	public XUnitsElements getXUnitsAccess() {
		return pXUnits;
	}
	
	public ParserRule getXUnitsRule() {
		return getXUnitsAccess().getRule();
	}
	
	//XUnitRef:
	//	{XUnitRef} name=ID;
	public XUnitRefElements getXUnitRefAccess() {
		return pXUnitRef;
	}
	
	public ParserRule getXUnitRefRule() {
		return getXUnitRefAccess().getRule();
	}
	
	//XUnit:
	//	{XUnit} (name=ID ('=' & xvalue=INT xbased=XUnitRef)? & ';');
	public XUnitElements getXUnitAccess() {
		return pXUnit;
	}
	
	public ParserRule getXUnitRule() {
		return getXUnitAccess().getRule();
	}
	
	//XEnums:
	//	{XEnums} ('(' & (','? & xenums+=XEnum)* & ')');
	public XEnumsElements getXEnumsAccess() {
		return pXEnums;
	}
	
	public ParserRule getXEnumsRule() {
		return getXEnumsAccess().getRule();
	}
	
	//XFunctionRef:
	//	{XFunctionRef} 'function' name=ID 'return' xreturn=XTypeRef;
	public XFunctionRefElements getXFunctionRefAccess() {
		return pXFunctionRef;
	}
	
	public ParserRule getXFunctionRefRule() {
		return getXFunctionRefAccess().getRule();
	}
	
	//XImpure:
	//	'impure' xfunc=XFunctionRef & ';';
	public XImpureElements getXImpureAccess() {
		return pXImpure;
	}
	
	public ParserRule getXImpureRule() {
		return getXImpureAccess().getRule();
	}
	
	//XEnum:
	//	ID | STRING;
	public XEnumElements getXEnumAccess() {
		return pXEnum;
	}
	
	public ParserRule getXEnumRule() {
		return getXEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
