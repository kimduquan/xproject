/*
 * generated by Xtext 2.15.0
 */
package xproject.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XHDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XhdlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.xhdl");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesXPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//xhdl:
		//	packages+=XPackage*;
		@Override public ParserRule getRule() { return rule; }
		
		//packages+=XPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }
		
		//XPackage
		public RuleCall getPackagesXPackageParserRuleCall_0() { return cPackagesXPackageParserRuleCall_0; }
	}
	public class XPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsXElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XPackage:
		//	{XPackage} 'package' name=ID 'is'
		//	elements+=XElement*
		//	'end' ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XPackage} 'package' name=ID 'is' elements+=XElement* 'end' ID ';'
		public Group getGroup() { return cGroup; }
		
		//{XPackage}
		public Action getXPackageAction_0() { return cXPackageAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//elements+=XElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//XElement
		public RuleCall getElementsXElementParserRuleCall_4_0() { return cElementsXElementParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_6() { return cIDTerminalRuleCall_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class XElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSubTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XElement:
		//	XType | XSignal | XSubType | XAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//XType | XSignal | XSubType | XAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XType
		public RuleCall getXTypeParserRuleCall_0() { return cXTypeParserRuleCall_0; }
		
		//XSignal
		public RuleCall getXSignalParserRuleCall_1() { return cXSignalParserRuleCall_1; }
		
		//XSubType
		public RuleCall getXSubTypeParserRuleCall_2() { return cXSubTypeParserRuleCall_2; }
		
		//XAttribute
		public RuleCall getXAttributeParserRuleCall_3() { return cXAttributeParserRuleCall_3; }
	}
	public class XAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeXTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeXTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeXTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XAttribute:
		//	{XAttribute} 'attribute' name=ID ':' type=[XType] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XAttribute} 'attribute' name=ID ':' type=[XType] ';'
		public Group getGroup() { return cGroup; }
		
		//{XAttribute}
		public Action getXAttributeAction_0() { return cXAttributeAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=[XType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[XType]
		public CrossReference getTypeXTypeCrossReference_4_0() { return cTypeXTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeXTypeIDTerminalRuleCall_4_0_1() { return cTypeXTypeIDTerminalRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class XSubTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XSubType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSubTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cIsXTypeCrossReference_4_0 = (CrossReference)cIsAssignment_4.eContents().get(0);
		private final RuleCall cIsXTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cIsXTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XSubType:
		//	{XSubType} 'subtype' name=ID 'is' is=[XType] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSubType} 'subtype' name=ID 'is' is=[XType] ';'
		public Group getGroup() { return cGroup; }
		
		//{XSubType}
		public Action getXSubTypeAction_0() { return cXSubTypeAction_0; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_1() { return cSubtypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//is=[XType]
		public Assignment getIsAssignment_4() { return cIsAssignment_4; }
		
		//[XType]
		public CrossReference getIsXTypeCrossReference_4_0() { return cIsXTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getIsXTypeIDTerminalRuleCall_4_0_1() { return cIsXTypeIDTerminalRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class XSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XSignal:
		//	{XSignal} 'signal' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSignal} 'signal' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//{XSignal}
		public Action getXSignalAction_0() { return cXSignalAction_0; }
		
		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class XTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cIsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cXEnumsParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final RuleCall cXRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cXArrayParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//XType:
		//	{XType} 'type' name=ID 'is' XEnums | XRange | XArray ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XType} 'type' name=ID 'is' XEnums | XRange | XArray ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{XType} 'type' name=ID 'is' XEnums
		public Group getGroup_0() { return cGroup_0; }
		
		//{XType}
		public Action getXTypeAction_0_0() { return cXTypeAction_0_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_1() { return cTypeKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'is'
		public Keyword getIsKeyword_0_3() { return cIsKeyword_0_3; }
		
		//XEnums
		public RuleCall getXEnumsParserRuleCall_0_4() { return cXEnumsParserRuleCall_0_4; }
		
		//XRange
		public RuleCall getXRangeParserRuleCall_1() { return cXRangeParserRuleCall_1; }
		
		//XArray ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//XArray
		public RuleCall getXArrayParserRuleCall_2_0() { return cXArrayParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class XArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRangeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTypeXTypeCrossReference_8_0 = (CrossReference)cTypeAssignment_8.eContents().get(0);
		private final RuleCall cTypeXTypeIDTerminalRuleCall_8_0_1 = (RuleCall)cTypeXTypeCrossReference_8_0.eContents().get(1);
		
		//XArray:
		//	{XArray} 'array' '(' ID 'range' '<>' ')' 'of' type=[XType];
		@Override public ParserRule getRule() { return rule; }
		
		//{XArray} 'array' '(' ID 'range' '<>' ')' 'of' type=[XType]
		public Group getGroup() { return cGroup; }
		
		//{XArray}
		public Action getXArrayAction_0() { return cXArrayAction_0; }
		
		//'array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//'range'
		public Keyword getRangeKeyword_4() { return cRangeKeyword_4; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'of'
		public Keyword getOfKeyword_7() { return cOfKeyword_7; }
		
		//type=[XType]
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//[XType]
		public CrossReference getTypeXTypeCrossReference_8_0() { return cTypeXTypeCrossReference_8_0; }
		
		//ID
		public RuleCall getTypeXTypeIDTerminalRuleCall_8_0_1() { return cTypeXTypeIDTerminalRuleCall_8_0_1; }
	}
	public class XRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXRangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cXUnitsParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//XRange:
		//	{XRange} 'range' INT 'to' INT XUnits?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XRange} 'range' INT 'to' INT XUnits?
		public Group getGroup() { return cGroup; }
		
		//{XRange}
		public Action getXRangeAction_0() { return cXRangeAction_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//XUnits?
		public RuleCall getXUnitsParserRuleCall_5() { return cXUnitsParserRuleCall_5; }
	}
	public class XUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XUnits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXUnitsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitsXUnitParserRuleCall_2_0 = (RuleCall)cUnitsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XUnits:
		//	{XUnits} 'units' units+=XUnit* 'end' 'units';
		@Override public ParserRule getRule() { return rule; }
		
		//{XUnits} 'units' units+=XUnit* 'end' 'units'
		public Group getGroup() { return cGroup; }
		
		//{XUnits}
		public Action getXUnitsAction_0() { return cXUnitsAction_0; }
		
		//'units'
		public Keyword getUnitsKeyword_1() { return cUnitsKeyword_1; }
		
		//units+=XUnit*
		public Assignment getUnitsAssignment_2() { return cUnitsAssignment_2; }
		
		//XUnit
		public RuleCall getUnitsXUnitParserRuleCall_2_0() { return cUnitsXUnitParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
		
		//'units'
		public Keyword getUnitsKeyword_4() { return cUnitsKeyword_4; }
	}
	public class XUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XUnit:
		//	ID '=' INT ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ID '=' INT ID ';'
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class XEnumsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xproject.XHDL.XEnums");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XEnums:
		//	'(' (','? ID)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (','? ID)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(','? ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','?
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private final XhdlElements pXhdl;
	private final XPackageElements pXPackage;
	private final XElementElements pXElement;
	private final XAttributeElements pXAttribute;
	private final XSubTypeElements pXSubType;
	private final XSignalElements pXSignal;
	private final XTypeElements pXType;
	private final XArrayElements pXArray;
	private final XRangeElements pXRange;
	private final XUnitsElements pXUnits;
	private final XUnitElements pXUnit;
	private final XEnumsElements pXEnums;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XHDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXhdl = new XhdlElements();
		this.pXPackage = new XPackageElements();
		this.pXElement = new XElementElements();
		this.pXAttribute = new XAttributeElements();
		this.pXSubType = new XSubTypeElements();
		this.pXSignal = new XSignalElements();
		this.pXType = new XTypeElements();
		this.pXArray = new XArrayElements();
		this.pXRange = new XRangeElements();
		this.pXUnits = new XUnitsElements();
		this.pXUnit = new XUnitElements();
		this.pXEnums = new XEnumsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xproject.XHDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//xhdl:
	//	packages+=XPackage*;
	public XhdlElements getXhdlAccess() {
		return pXhdl;
	}
	
	public ParserRule getXhdlRule() {
		return getXhdlAccess().getRule();
	}
	
	//XPackage:
	//	{XPackage} 'package' name=ID 'is'
	//	elements+=XElement*
	//	'end' ID ';';
	public XPackageElements getXPackageAccess() {
		return pXPackage;
	}
	
	public ParserRule getXPackageRule() {
		return getXPackageAccess().getRule();
	}
	
	//XElement:
	//	XType | XSignal | XSubType | XAttribute;
	public XElementElements getXElementAccess() {
		return pXElement;
	}
	
	public ParserRule getXElementRule() {
		return getXElementAccess().getRule();
	}
	
	//XAttribute:
	//	{XAttribute} 'attribute' name=ID ':' type=[XType] ';';
	public XAttributeElements getXAttributeAccess() {
		return pXAttribute;
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}
	
	//XSubType:
	//	{XSubType} 'subtype' name=ID 'is' is=[XType] ';';
	public XSubTypeElements getXSubTypeAccess() {
		return pXSubType;
	}
	
	public ParserRule getXSubTypeRule() {
		return getXSubTypeAccess().getRule();
	}
	
	//XSignal:
	//	{XSignal} 'signal' name=ID ';';
	public XSignalElements getXSignalAccess() {
		return pXSignal;
	}
	
	public ParserRule getXSignalRule() {
		return getXSignalAccess().getRule();
	}
	
	//XType:
	//	{XType} 'type' name=ID 'is' XEnums | XRange | XArray ';';
	public XTypeElements getXTypeAccess() {
		return pXType;
	}
	
	public ParserRule getXTypeRule() {
		return getXTypeAccess().getRule();
	}
	
	//XArray:
	//	{XArray} 'array' '(' ID 'range' '<>' ')' 'of' type=[XType];
	public XArrayElements getXArrayAccess() {
		return pXArray;
	}
	
	public ParserRule getXArrayRule() {
		return getXArrayAccess().getRule();
	}
	
	//XRange:
	//	{XRange} 'range' INT 'to' INT XUnits?;
	public XRangeElements getXRangeAccess() {
		return pXRange;
	}
	
	public ParserRule getXRangeRule() {
		return getXRangeAccess().getRule();
	}
	
	//XUnits:
	//	{XUnits} 'units' units+=XUnit* 'end' 'units';
	public XUnitsElements getXUnitsAccess() {
		return pXUnits;
	}
	
	public ParserRule getXUnitsRule() {
		return getXUnitsAccess().getRule();
	}
	
	//XUnit:
	//	ID '=' INT ID ';';
	public XUnitElements getXUnitAccess() {
		return pXUnit;
	}
	
	public ParserRule getXUnitRule() {
		return getXUnitAccess().getRule();
	}
	
	//XEnums:
	//	'(' (','? ID)* ')';
	public XEnumsElements getXEnumsAccess() {
		return pXEnums;
	}
	
	public ParserRule getXEnumsRule() {
		return getXEnumsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
