grammar xproject.XHDL with org.eclipse.xtext.common.Terminals hidden(WS, COMMENT)

generate xhdl "http://www.xproject.org/xhdl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

xhdl:
	(packages+=XPackage)*
;

terminal COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')?;
terminal XLONG returns ecore::ELong: '-'?('0'..'9')+;
terminal XDOUBLE returns ecore::EDouble: '[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?';

XPackageRef:
	{XPackageRef} name=ID
;

XPackage:
	'package' name=ID 'is' 
		(xis+=XElement)*
	'end' (xend=XPackageRef & ';')
;

XTypeRef:
	{XTypeRef} name=ID
;

XElement:
	XType | XSignal | XSubType | XAttribute | XImpure | XFunction | XProcedure
;

XAttribute:
	{XAttribute} 'attribute' (name=ID & ':' & xtype=XTypeRef & ';')
;

XSubType:
	{XSubType} 'subtype' name=ID 'is' (xis=XTypeRef (xrange=XRange)? & ';')
;

XSignal:
	{XSignal} 'signal' (name=ID & ':' xtype=XTypeRef & (';=' & ID)? & ';')
;

XType:
	{XType} 'type' name=ID 'is' ((xenums=XEnums | xrange=XRange | xarray=XArray | xaccess=XAccess | xfileOf=XFileOf) & ';')
;

XArray:
	{XArray} 'array' ('(' & xrange=XTypeRef 'range' '<>' & ')') 'of' xof=XTypeRef
;

XRange:
	{XRange} 'range' xfrom=XRangeValue 'to' xto=XRangeValue (xunits=XUnits)?
;

XRangeValue:
	{XRangeValue} (((xlvalue=XLONG | xdvalue=XDOUBLE ) (xunit=XUnitRef)?) | (ID '\'' & ID))
;

XUnits:
	{XUnits} 'units' (xunits+=XUnit)* 'end' 'units'
;

XUnitRef:
	{XUnitRef} name=ID
;

XUnit:
	{XUnit} (name=ID ('=' & xvalue=INT xbased=XUnitRef)? & ';')
;

XEnums:
	{XEnums} ('(' & ( ','? & xenums+=XEnum)* & ')')
;

XFunction:
	{XFunction} 'function' (name=ID & xparameters=XParameters & 'return' xreturn=XTypeRef & ';')
;

XImpure:
	'impure' & xfunc=XFunction
;

XEnum:
	name=ID | name=STRING
;

XAccess:
	{XAccess} 'access' xtype=XTypeRef
;

XFileOf:
	{XFile} ('file' & 'of' xtype=XTypeRef)
;

XParameter:
	{XParameter} (name=ID & ':'& xtype=XTypeRef & (':=' & xdefaultValue=ID )? )
;

XProcedure:
	{XProcedure} 'procedure' (name=ID & xinputs=XInputs & ';')
;

XInput:
	{XInput} (name=ID & ':' & (xinout='in' | xinout='inout' | xinout='out')? xtyp=XTypeRef) | XFileRef
;

XFileRef:
	{XFileRef} 'file' (name=ID & ':' & xtype=XTypeRef)
;

XInputs:
	{XInputs} ( '(' & ( ';'? & xinputs+=XInput)* & ')' )
;

XParameters:
	{XParameters} ( '(' & ( ';'? & xparameters+=XParameter)* & ')' )
;